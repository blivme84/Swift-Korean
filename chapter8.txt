# 08 함수 (Functions)
> Translator : Quartet( ungsik.yun@gmail.com )

함수는 특정 일을 수행하는 자기 완결성(Self-contained)을 가진 코드들의 집합입니다. 함수의 이름을 지으면서 이 함수가 무엇을 하는지 식별하게 할 수 있습니다. 그리고 그 이름으로 함수를 "호출(Call)"하여 필요할때 함수의 일을 수행하게 만들 수 있습니다.

스위프트(Swift)의 함수 문법은 파라메터가 없는 C스타일의 함수에서부터 지역 파라메터와 파라메터 이름 각각에 대한 외부 파라메터를 가지고 있는 복잡한 오브젝티브-C 스타일의 함수까지 전부 표현할 수 있습니다. 파라메터는 기본 값을 가질수 있어 단순한 함수 호출에 쓰일수 있습니다. 또한 In-out 파라메터로서 변수를 넘겨 변수가 함수의 실행후에 파라메터가 변경되게 할 수도 있습니다.

파라메터 타입과 반환(Return) 타입으로 이루어진 모든 스위프트의 함수들은 타입을 가집니다. 스위프트에 있는 다른 타입들과 마찬가지로, 함수의 타입들을 사용할 수 있습니다. 즉 함수를 다른 함수에 파라메터로서 넘겨주거나 함수를 다른 함수에서 반환받을 수 있습니다. 함수들은 유용한 기능 캡슐화를 위해 중첩된 함수안의 범위 내에서 쓰여질수도 있습니다.

## 함수 정의와 호출
함수를 정의할 때 함수의 입력(파라메터)을 선택적으로 하나 이상의 이름이 있고 타입이 정해진 값으로 할 수 있습니다. 또한 값의 타입은 함수의 실행이 끝났을 때 함수가 선택적으로 되돌려 줄 수 있습니다 (반환 타입).

모든 함수는 함수명을 가지고 있으며, 함수명은 함수가 하는일을 설명해줍니다. 함수를 사용하기 위해서 함수를 함수의 이름을 사용하여 "호출"하고 함수의 파라메터 타입들과 일치하는 입력 값들(아규먼트Arguments)을 넘겨줍니다. 함수의 입력값은 함수의 파라메터리스트와 언제나 일치해야합니다.

아래의 함수 예제 이름은 `sayHello(_:)`입니다. 함수가 행하는 일이 바로 그것이기 때문입니다. 입력으로 사람의 이름을 받아서 그 사람에 대한 환영 인사를 반환합니다. 이를 달성하기 위해 파라메터를 하나 정의하고 - `personName`이라는 `String` 값 - 반환 타입을 `String`으로 하여 사람에 대한 환영 인사를 하는 것입니다.

```swift
func sayHello(personName: String) -> String {
    let greeting = "Hello, " + personName + "!"
    return greeting
}
```
이 모든 정보들은 `func` 키워드 접두어를 쓰는 함수의 정의에 포함됩니다. 함수의 반환 타입을 표시하기위해 함수 이름의 오른쪽에 화살표(하이픈과 우측 꺽괄호) `->` 와 반환할 타입을 표시합니다.

함수 정의는 함수가 무엇을 하는지, 무엇을 파라메터로 받는지 완료되었을때 무엇을 반환하는지 설명합니다. 함수 정의는 함수가 코드안에서 호출될때 명확하고 애매함이 없는 방법으로 사용될수 있게합니다:

```swift
print(sayHello("Anna"))
// Prints "Hello, Anna!"
print(sayHello("Brian"))
// Prints "Hello, Brian!"
```
`sayHello(_:)` 함수를 괄호안에 `String` 타입의 인수를 넣어서 호출합니다. 예를들면 `sayHello("Anna")` 처럼 말이죠. `sayHello(_:)`가 `String`타입을 반환하기에 `sayHello(_:)`함수는 `print(_:separator:terminator:)`로 싸여서 호출될 수 있습니다. 이렇게 함으로서 함수가 `sayHello`함수의 반환값을 위에 보이는 것처럼 출력할 수 있습니다.

`sayHello(_:)`함수의 몸체는 `greeting`이라는 새 `String` 상수를 선언하는 것으로 시작합니다. 그리고 `greeting`을 `personName`에 대한 단순한 환영인사 메시지로 설정합니다. 이 환영 인사는 `return`키워드를 통해 함수의 밖으로 되돌려지게 됩니다. `return greeting`이 실행 되면 함수의 실행은 끝나게되고, `greeting`의 현재 값을 돌려주게됩니다.

`sayHello(_:)` 함수를 다른 입력값으로 여러 번 호출할 수 있습니다. 위의 예제는 입력값이 "Anna", "Brian" 일때를 각각 보여주고 있습니다. 함수는 사람(입력값)에 맞게끔 환영인사를 각각의 경우에 맞추어 돌려줍니다.

함수 몸체를 단순화하기 위해서는, 메시지의 생성과 반환을 한줄로 합치면 됩니다:

```swift
func sayHelloAgain(personName: String) -> String {
    return "Hello again, " + personName + "!"
}
print(sayHelloAgain("Anna"))
// Prints "Hello again, Anna!"
```
## 함수 파라메터와 반환값
스위프트에서 함수 파라메터와 반환값은 극도로 유연합니다. 이름없는 파라메터를 사용하는 단순한 기능성 함수에서부터 명시적 파라메터 이름(expressive parameter names)과 다른 파라메터 옵션을 가진 복잡한 함수에 이르기까지 무엇이든 정의할수 있습니다.

### 파라메터가 없는 함수

함수에 입력 파라메터를 정의할 필요는 없습니다. 밑의 예제는 입력 파라메터가 없는 함수입니다. 이 함수는 호출될때마다 언제나 같은 메시지를 반환합니다.

```swift
func sayHelloWorld() -> String {
    return "hello, world"
}
print(sayHelloWorld())
// Prints "hello, world"
```

함수 정의는 아무런 파라메터를 받지 않는다고 해도 함수 이름 뒤에 괄호를 포함해야 합니다. 함수가 호출될 때도 함수 이름뒤에 빈 괄호 한쌍을 표시해야 합니다.

### 파라메터 복수 입력
함수는 괄호 안에서 콤마(`,`)로 구분되는 복수의 입력 파라메터를 가질 수 있습니다. 
이 함수는 사람의 이름과 그들이 이미 인사를 했는지의 여부를 받아, 그 사람에게 할 인사말을 돌려줍니다.
```swift
func sayHello(personName: String, alreadyGreeted: Bool) -> String {
    if alreadyGreeted {
        return sayHelloAgain(personName)
    } else {
        return sayHello(personName)
    }
}
print(sayHello("Tim", alreadyGreeted: true))
// Prints "Hello again, Tim!"
```
`sayHello(_:alreadyGreeted:)`를 `String` 변수값과 `alreadyGreeted`로 이름붙인 `Bool` 변수값을 컴마로 구분지어서 통과시켜 호출할 수 있습니다. 이 함수는 이전에 만들었던 `sayHello(_:)` 함수와는 별개임을 기억하세요. 비록 두 함수가 `sayHello`로 시작하는 공통점이 있지만, `sayHello(_:alreadyGreeted:)` 함수는 2개의 변수를, `sayHello(_:)` 함수는 1개만을 변수로 취합니다.

하나 이상의 파라메터로 함수를 호출할 때, 첫 번째 이후에 있는 파라메터는 해당되는 이름으로 이름붙여져야 합니다. 함수 파라메터 네이밍에 대한 더 자세한 내용은  [Function Parameter Names](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Functions.html#//apple_ref/doc/uid/TP40014097-CH10-ID166)를 참고하세요.

### 반환값이 없는 함수

함수에 반환 타입을 정의할 필요는 없습니다. 밑의 예제는 `sayHello(_:)`의 `sayGoodbye(_:)`라 불리는 버전입니다. 값을 반환하지 않고 자신의 `String`값을 출력합니다.
```swift
func sayGoodbye(personName: String) {
    print("Goodbye, \(personName)!")
}
sayGoodbye("Dave")
// Prints "Goodbye, Dave!"
```
반환값이 없기 때문에 함수 정의는 반환 화살표(`->`)나 반환 타입을 포함하지 않습니다.

> NOTE
> 엄밀히 말하자면, `sayGoodbye` 함수는 반환값이 정의되어있지 않아도 여전히 반환값을 가집니다.  반환값이 정의되어있지 않은 함수는 `Void`타입의 특수값을 반환합니다. `()`로 쓰여질수 있는 단순한 빈 튜플(Tuple)이며, 사실상 요소를 갖고있지 않은 튜플입니다.

함수가 호출되었을때 함수의 반환값은 무시될수 있습니다.
```swift
func printAndCount(stringToPrint: String) -> Int {
    print(stringToPrint)
    return stringToPrint.characters.count
}
func printWithoutCounting(stringToPrint: String) {
    printAndCount(stringToPrint)
}
printAndCount("hello, world")
// prints "hello, world" and returns a value of 12
printWithoutCounting("hello, world")
// prints "hello, world" but does not return a value
```
첫 번째 함수인 `printAndCount(_:)`는 문자열을 출력하고 출력한 문자열의 캐릭터 갯수를 세서 `Int` 타입으로 반환합니다. 두 번째 함수인 `printWithoutCounting`은 첫번째 함수를 호출합니다. 하지만 반환값은 무시합니다. 두 번째 함수가 호출되면 메시지는 첫번째 함수에 의해 여전히 출력되지만, 첫 번째 함수의 반환값은 사용되지 않습니다.

> NOTE
> 반환값은 무시될수 있습니다. 하지만 함수는 언제나 값을 반환할 것입니다. 반환 타입이 정의된 함수는 값을 반환하지 않은채로 함수가 실행 될 수 없습니다. 그렇게 하려고 시도할 경우 컴파일 에러를 낼 것입니다. 

### 여러 개의 반환값을 가지는 함수
튜플 타입은 하나의 합성된 반환값으로서 함수의 반환에 사용될 수 있습니다.

아래의 예제는 `minMax(_:)`라는 함수의 정의입니다. 이 함수는 `Int` 값들의 배열에서 가장 작은 것과 가장 큰 것을 찾습니다.

```swift
func minMax(array: [Int]) -> (min: Int, max: Int) {
    var currentMin = array[0]
    var currentMax = array[0]
    for value in array[1..<array.count] {
        if value < currentMin {
            currentMin = value
        } else if value > currentMax {
            currentMax = value
        }
    }
    return (currentMin, currentMax)
}
```
이 `minMax(_:)` 함수는 두 `Int` 값을 포함하는 튜플을 리턴합니다. 이 값들은 `min`과 `max`로 라벨링되어 있으며, 그것들은 함수의 리턴값에 질의할 때 이름으로 접근할 수 있습니다.

`minMax(_:)` 함수의 몸체는 배열의 첫 번째 정수값을 위한 `currentMin`과 `currentMax` 값을 호출해서 작업중인 변수에 세팅하는 것으로 시작합니다. 함수는 그리고나서 배열에 남아있는 값을 반복하고, 각 값들이 `currentMin`과 `currentMax`보다 상대적으로 크고 작은지에 대해 체크합니다. 마지막으로, 최종적인 최소와 최대값이 두 `Int` 값의 튜플로 리턴됩니다.

함수의 리턴 타입중 일부로 튜플의 멤버값이 이름 붙여졌기에, 그것들은 최소와 최대값을 찾기 위해 `.` 문법을 통해서 접근될 수 있습니다.

```swift
let bounds = minMax([8, -6, 2, 109, 3, 71])
print("min is \(bounds.min) and max is \(bounds.max)")
// Prints "min is -6 and max is 109"
```

튜플의 멤버들은 함수 내에서 반환할때 이름을 지을 필요가 없습니다. 함수 정의시에 함수의 반환 타입에 이미 명시가 되어있기 때문입니다. 

### 선택적인(Optional) 튜플 리턴 타입

만약 함수로부터 리턴되는 튜플 타입이 전체 튜플에 대해 잠재적인 "값 없음"을 가진다면, 당신은 optional 튜플 타입을 튜플이 `nil`을 가질 수 있다는 것을 반영하기 위해 사용할 수 있습니다. 당신은 optional 튜플 리턴 타입을 `(Int, Int)?`, `(String, Int, Bool)?`과 같이 물음표를 통해 반영할 수 있습니다.

> Note
>
> `(Int, Int)?`와 같은 Optional 튜플은 optional 타입을 포함하는 튜플 `(Int?, Int?)`와는 다릅니다. optional 튜플 타입은 전체 튜플이 optional이라는 것이고, 이것은 튜플 안의 각각의 값이 optional인 것과는 다릅니다.

위의 `minMax(_:)` 함수는 두 `Int` 값을 가진 튜플을 리턴합니다. 하지만, 함수는 배열에 대해 그것을 통과했는지의 안전 체크를 수행하지 않습니다. 만약 `array` argument가 빈 배열을 포함한다면, 위의 `minMax(_:)` 함수는 `array[0]` 값에 접근할 때, 런타임 에러를 발생할 것입니다.

이 빈 배열의 경우를 다루기 위해, `minMax(_:)` 함수를 optional 튜플 타입을 리턴하도록, 그리고 배열이 비었을 때, `nil` 값을 리턴하도록 합시다.

```swift
func minMax(array: [Int]) -> (min: Int, max: Int)? {
    if array.isEmpty { return nil }
    var currentMin = array[0]
    var currentMax = array[0]
    for value in array[1..<array.count] {
        if value < currentMin {
            currentMin = value
        } else if value > currentMax {
            currentMax = value
        }
    }
    return (currentMin, currentMax)
}
```

optional 바인딩을 통해 `minMax(_:)` 함수의 리턴값이 `nil`인지 실제 튜플인지를 체크할 수 있습니다.

```swift
if let bounds = minMax([8, -6, 2, 109, 3, 71]) {
    print("min is \(bounds.min) and max is \(bounds.max)")
}
// Prints "min is -6 and max is 109"
```

## 함수 파라메터 이름
함수 파라메터는 외부 파라메터 이름과 내부 파라메터 이름 모두를 갖습니다. 외부 파라메터 이름은 함수 호출시에 argument를 통과할 떄 사용됩니다. 내부 파라메터 이름은 함수의 구현에서 사용됩니다.

```swift
func someFunction(firstParameterName: Int, secondParameterName: Int) {
    // function body goes here
    // firstParameterName and secondParameterName refer to
    // the argument values for the first and second parameters
}
someFunction(1, secondParameterName: 2)
```
기본적으로 첫 번째 파라메터는 외부 이름을 생략합니다. 그리고 두 번째와 이어지는 파라메터는 그들의 외부 이름으로서 내부 이름을 사용합니다. 모든 파라메터는 unique 내부 이름을 갖습니다. 여러 개의 파라메터가 같은 외부 이름을 가질 수 있는 가능성이 있음에도 불구하고, unique 외부 파라메터 이름은 당신의 코드를 가독성을 갖도록 도와줍니다.

### 외부 파라메터 이름(External Parameter Names)
외부 파라메터 이름은 지역 파라메터 이름 바로 앞에 공백으로 구분해서 작성합니다.
```swift
func someFunction(externalParameterName localParameterName: Int) {
    // function body goes here, and can use localParameterName
    // to refer to the argument value for that parameter
}
```
> NOTE
> 만약 외부 파라메터 이름이 파라메터에 대해 제공된다면, 외부 파라메터 이름은 언제나 함수 호출시에 사용되어야 합니다.

두 사람의 이름을 취해 그들에게 하는 인사말을 돌려주는 `sayHello(_:)`의 다른 버전을 살펴봅시다.

```swift
func sayHello(to person: String, and anotherPerson: String) -> String {
    return "Hello \(person) and \(anotherPerson)!"
}
print(sayHello(to: "Bill", and: "Ted"))
// Prints "Hello Bill and Ted!"
```

외부 파라메터 이름을 명시함으로서, 첫 번째와 두 번째 argument는 당신이 호출할 때, `sayHello(to:and:)`로 라벨링됩니다.

외부 파라메터 이름의 사용은 함수를 표현적으로, 문장과 같은 방식으로 호출하는 것을 허용합니다. 반면에 내부적으로는 함수를 가독성이 있고, 깨끗하게 할 수 있습니다.

### 외부 파라메터 이름을 생략하기

만약 당신이 함수의 두 번째나 이어지는 파라메터에 외부 이름을 사용하길 원하지 않는다면, 언더스코어(`_`)를 파라메터의 명시적인 외부 이름대신 사용하세요.

```swift
func someFunction(firstParameterName: Int, _ secondParameterName: Int) {
    // function body goes here
    // firstParameterName and secondParameterName refer to
    // the argument values for the first and second parameters
}
someFunction(1, 2)
```

> Note
>
> 첫 번째 파라메터는 외부 파라메터 이름을 기본적으로 생략하기에, 명시적인 언더스코어를 쓰는 것과는 관계 없습니다.

### 기본(default) 파라메터 값

함수 정의의 일부로서 파라메터의 기본값을 지정해줄 수 있습니다. 기본값이 지정되어 있으면 함수를 호출할때 해당 파라메터를 생략할 수 있습니다.

```swift
func someFunction(parameterWithDefault: Int = 12) {
    // function body goes here
    // if no arguments are passed to the function call,
    // value of parameterWithDefault is 12
}
someFunction(6) // parameterWithDefault is 6
someFunction() // parameterWithDefault is 12
```

>NOTE
>기본값을 가지는 파라메터는 함수의 파라메터 리스트에서 마지막에 둡니다. 이렇게 함으로써 함수 호출이 기본값을 가지지 않는 파라메터들이 언제나 같은 순서임을 보장할 수 있고, 매번 함수가 호출될 때마다 같은 함수가 호출되게 합니다.

### 가변 갯수(Variadic) 파라메터
가변 갯수 파라메터는 특정 타입의 값을 0개 이상 받을 수 있습니다. 가변 갯수 파라메터를 사용함으로써 함수 호출시 입력 값들이 임의의 갯수가 될 수 있다고 정할 수 있습니다. 파라메터의 타입 이름의 뒤에 마침표 세개(`...`)를 삽입하는 것으로 가변 갯수 파라메터를 작성할 수 있습니다.

가변 갯수 파라메터로 함수의 내부에 전달된 값들은 적절한 타입의 배열(`array`)로 만들어집니다. 예를 들어 `numbers`라는 이름의 가변 갯수 파라메터의 타입이 `Double...`이라면 함수의 내부에서는 `[Double]`타입의 `numbers` 이름을 가진 배열로 만들어집니다.

밑의 예제는 평균이라 불리는 산술 평균(arithmetic mean)을 임의의 갯수를 가진 숫자의 목록에서 구합니다.

```swift
func arithmeticMean(numbers: Double...) -> Double {
    var total: Double = 0
    for number in numbers {
        total += number
    }
    return total / Double(numbers.count)
}
arithmeticMean(1, 2, 3, 4, 5)
// returns 3.0, which is the arithmetic mean of these five numbers
arithmeticMean(3, 8.25, 18.75)
// returns 10.0, which is the arithmetic mean of these three numbers
```
> NOTE
> 함수는 최대 한 개의 가변 갯수 파라메터를 가질 수 있습니다.

### 입출력(In-Out)파라메터
함수의 파라메터는 기본적으로 상수입니다. 함수 내에서 파라메터의 값을 바꾸려고 한다면, 함수는 컴파일에러를 내보닙니다. 이것은 당신이 실수로 파라메터 값을 바꾸지 못하게 합니다. 만약 함수가 파라메터의 값을 변경하고 그 변경이 함수 호출이 종료된 후에도 계속되길 원한다면, 파라메터를 _입출력_ 파라메터로 정의하면 됩니다.

_입출력_파라메터를 정의하기 위해서는 `inout` 키워드를 파라메터 정의의 시작점에 작성하면 됩니다. 입출력 파라메터의 값은 함수의 _안으로_ 전달 되어, 함수에 의해 변경되고, 함수에서 다시 _나와서_ 원래의 값을 대체합니다. 인아웃 파라메터의 행동과 연관돈 컴파일러 최적화에 대한 자세한 토론은 [In-Out Parameters](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545)를 참고하세요.

입출력 파라메터로 넘길 수 있는 값은 인수(argument)뿐입니다. 상수나 문자값은 입출력 파라메터로 넘겨질 수 없습니다. 상수나 문자값은 변경될 수 없기 때문입니다. 인수를 입출력 파라메터로 넘길때 변수의 이름 바로 앞에 앰퍼샌드(`&`)를 붙여서 이 파라메터가 함수에 의해 변경될 수 있음을 표시합니다.

>NOTE
>입출력 파라메터는 기본값을 가질 수 없습니다. 또한 가변 갯수 파라메터도 `inout`으로 지정할 수 없습니다.

여기에 `swapTwoInts(_:_:)`라는 함수 예제가 있습니다. 이 함수는 두 개의 in-out 정수(integer) 파라메터인 `a`와 `b`를 가지고 있습니다.
```swift
func swapTwoInts(inout a: Int, inout _ b: Int) {
    let temporaryA = a
    a = b
    b = temporaryA
}
```
`swapTwoInts(_:_:)` 함수는 단순히 두 값을 교환하여 `b`를 `a`의 값으로 하고, `a`를 `b`의 값으로 합니다. 이 함수는 `a`의 값을 임시 상수인 `temporaryA`에 저장하고, `b`의 값을 `a`로 할당합니다. 그리고 `temporaryA`의 값을 `b`로 할당합니다.

`swapTwoInts(_:_:)` 함수는 두 `Int` 타입의 변수를 가지고 서로의 값을 교환하는 함수라고 할 수 있습니다다. 주의할 것은 `someInt`와 `anotherInt`는 앰퍼샌드 접두어가 쓰여서 함수에 전달되었다는 것입니다.

```swift
var someInt = 3
var anotherInt = 107
swapTwoInts(&someInt, &anotherInt)
print("someInt is now \(someInt), and anotherInt is now \(anotherInt)")
// Prints "someInt is now 107, and anotherInt is now 3"
```
위의 예제는 `someInt`와 `anotherInt`가 함수 외부에서 정의되었음에도, 그 값이 `swapTwoInts(_:_:)` 함수에 의해 변경 되었음을 보여주고 있습니다.

>NOTE
>입출력 파라메터는 함수가 값을 반환하는 것이 아닙니다. 위의 `swapTwoInts` 예제는 반환 타입이나 반환값을 정의하고 있지 않습니다. 하지만 `someInt`와 `anotherInt`의 값을 변경하죠. 입출력 파라메터는 함수가 함수 밖의 범위(scope)에 영향을 끼칠 수 있는 또다른 방법입니다.

## 함수 타입
모든 함수들은 특유의 함수 타입을 가지고 있습니다. 함수 타입은 함수의 파라메터 타입들과 반환 타입으로 구성됩니다.

예를 들면 이렇습니다.

```swift
func addTwoInts(a: Int, _ b: Int) -> Int {
    return a + b
}
func multiplyTwoInts(a: Int, _ b: Int) -> Int {
    return a * b
}
```
이 예제는 `addTwoInts`와 `multiplyTwoInts`, 두 개의 단순한 수학 함수를 정의합니다. 함수들은 각각 두 개의 `Int`값을 취하고 `Int`값을 계산의 적절한 결과로서 반환합니다.

위 두 함수의 타입은 `(Int, Int) -> Int`입니다. 이것은 

"함수 타입은 `Int`타입의 파라메터가 두 개며 반환값의 타입은 `Int`입니다." 

라고 말할 수 있습니다.

여기의 또다른 예제는 파라메터나 반환값이 없는 함수입니다.

```swift
func printHelloWorld() {
    print("hello, world")
}
```
이 함수의 타입은 `() -> Void`이며, 

"함수는 파라메터가 없고 `Void`를 반환합니다."

### 함수 타입을 사용하기
함수 타입 역시 스위프트의 다른 타입들처럼  사용될 수 있습니다. 예를 들어 함수 타입의 상수나 변수를 만들어서 적절한 함수를 할당할 수 있습니다.
```swift
var mathFunction: (Int, Int) -> Int = addTwoInts
```
위 코드는 

"두 개의 `Int` 값을 취하며 `Int`값을 반환하는 함수 타입 `mathFuntion`을 정의하고, 이 새로운 변수가 `addTwoInts` 함수를 참조(refer)하도록 한다."

고 할 수 있습니다.

위에서 본 `addTwoInts(_:_:)` 함수는 `mathFunction`변수와 같은 타입입니다. 따라서 스위프트의 타입 체커에 의해 할당이 허용되죠.

이제 `mathFunction`을 이용해 할당된 함수를 호출할 수 있습니다.

```swift
print("Result: \(mathFunction(2, 3))")
// Prints "Result: 5"
```
함수 타입이 아닌 변수가 그러하듯이, 일치하는 타입의 다른 함수 또한 같은 변수에 할당 될 수 있습니다.
```swift
mathFunction = multiplyTwoInts
print("Result: \(mathFunction(2, 3))")
// Prints "Result: 6"
```
다른 타입과 마찬가지로, 함수를 상수나 변수에 할당할 때 스위프트가 타입을 추론하게 내버려 둘 수 있습니다.
```swift
let anotherMathFunction = addTwoInts
// anotherMathFunction is inferred to be of type (Int, Int) -> Int
```
### 파라메터 타입으로서의 함수 타입
`(Int, Int) -> Int`와 같은 함수 타입을 파라메터 타입으로 함수에 이용할 수 있습니다. 이로서 함수 구현의 일부를 함수가 호출 될 때 함수를 호출하는 쪽에 맡기는 것이 가능합니다.
이 예제는 위에서 가져온 수학 함수의 결과를 출력합니다.
```swift
func printMathResult(mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {
    print("Result: \(mathFunction(a, b))")
}
printMathResult(addTwoInts, 3, 5)
// Prints "Result: 8"
```
이 예제는 세 개의 파라메터를 가지는 `printMathResult(_:_:_:)`함수를 정의합니다. 첫 번째 파라메터는 타입이 `(Int, Int) -> Int`인 `mathFunction`입니다. 함수 타입이 맞는 함수라면 인수로서 첫 번째 파라메터에 어느것이나 넘길 수 있습니다. 두 번째와 세 번째 파라메터는 `a`와 `b`이며 둘 다 `Int`타입입니다. 이 둘은 제공된 수학 함수의 두 입력값으로 사용됩니다.
`printMathResult(_:_:_:)` 함수가 호출되면 `addTwoInts(_:_:)`함수와, 정수 값으로 `3`과 `5`를 넘깁니다. 이 함수는 제공받은 함수를 호출할때 `3`과 `5`를 이용합니다. 그리고 결과인 `8`을 출력합니다. 
`printMathResult(_:_:_:)`의 역할은 적절한 타입의 수학 함수의 실행 결과를 출력하는 것입니다. 이 함수는 넘겨받는 함수의 구현이 실제로 무엇을 하는지 상관하지 않습니다. 오직 함수가 정확하게 일치하는 타입인지만 봅니다. 이로써 `printMathResult(_:_:_:)`함수가 타입에 안전한 방식(type-safe way)으로 자기 기능의 일부를 호출자에게 넘길 수 있게 됩니다.

### 함수 타입과 반환 타입
함수 타입을 다른 함수의 반환 타입으로 사용할 수 있습니다. 이는 완전한 함수 타입을 반환할 함수 정의의 반환 화살표 (`->`)바로 뒤에 작성함으로서 할 수 있습니다.
다음 예제는 두개의 간단한 함수인 `stepForward(_:)`와 `stepBackward(_:)`를 정의하고 있습니다. `stepForward(_:)`함수는 입력값보다 1이 더 큰 값을 반환하고 `stepBackward(_:)`함수는 입력 값보다 1이 작은 값을 반환합니다. 두 함수의 타입은 모두 `(Int) -> Int`입니다.
```swift
func stepForward(input: Int) -> Int {
    return input + 1
}
func stepBackward(input: Int) -> Int {
    return input - 1
}
```
여기 `chooseStepFunction(_:)` 함수가 있습니다.  이 함수의 반환 타입은 "`(Int) -> Int`를 반환하는 함수"입니다. `chooseStepFunction(_:)`은 `backwards` 불리언 파라메터에 따라 `stepForward(_:)`함수와 `stepBackward(_:)`함수 중 하나를 반환합니다.
```swift
func chooseStepFunction(backwards: Bool) -> (Int) -> Int {
    return backwards ? stepBackward : stepForward
}
```
`chooseStepFunction(_:)`를 이용하여 어느 한쪽 방향으로 나아가는(증가 또는 감소하는) 함수를 얻을 수 있습니다.
```swift
var currentValue = 3
let moveNearerToZero = chooseStepFunction(currentValue > 0)
// moveNearerToZero now refers to the stepBackward() function
```
앞서 한 예제들은 `currentValue`변수에 따라 점진적으로 0이 되기 위해 필요한 증가나 감소 방향을 산출한다.`currentValue`의 초기값은 `3`이며, 이는 곧 `currentValue > 0`은 `true`를 반환하게 합니다. 그리고  `chooseStepFunction(_:)`이 `stepBackward(_:)`함수를 반환하게 합니다. 반환된 함수에 대한 참조(reference)는 `moveNearerToZero` 상수에 저장됩니다.
이제 `moveNearerToZero`가 올바른 함수를 참조하게 되었기에, 0까지 세는데 이용할 수 있습니다.
```swift
print("Counting to zero:")
// Counting to zero:
while currentValue != 0 {
    print("\(currentValue)... ")
    currentValue = moveNearerToZero(currentValue)
}
print("zero!")
// 3...
// 2...
// 1...
// zero!
```
## 중첩된 함수들
여기까지 이 챕터에서 마주친 모든 함수들은 모두 전역 범위(global scope)에 정의된  _전역 함수_의 예제였습니다. 또한 _중첩된 함수_라 불리는, 함수 내부에 다른 함수를 정의할 수 있습니다.
중첩 함수는 범위 밖의 세계에서 기본적으로 숨겨져 있습니다. 하지만 감싸고 있는 함수에 의해 여전히 이용될 수 있습니다. 감싸고 있는 함수는 중첩된 함수들을 반환하여 다른 범위에서 함수가 사용될 수 있게 할 수 있습니다.
위 예제의 `chooseStepFunction(_:)`을 다음과 같이 중첩된 함수를 이용하여 재작성 할 수 있습니다.
```swift
func chooseStepFunction(backwards: Bool) -> (Int) -> Int {
    func stepForward(input: Int) -> Int { return input + 1 }
    func stepBackward(input: Int) -> Int { return input - 1 }
    return backwards ? stepBackward : stepForward
}
var currentValue = -4
let moveNearerToZero = chooseStepFunction(currentValue > 0)
// moveNearerToZero now refers to the nested stepForward() function
while currentValue != 0 {
    print("\(currentValue)... ")
    currentValue = moveNearerToZero(currentValue)
}
print("zero!")
// -4...
// -3...
// -2...
// -1...
// zero!
```

