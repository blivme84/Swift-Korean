# 21 타입 변환 (Type Casting)
> Translator : Snowcat8436 (snowcat8436@gmail.com)

## 타입변환(Type Casting)

타입 변환이란 인스턴스(instance)의 타입을 체크하기 위한 방법이거나 인스턴스를 마치 해당 클래스가 가친 계층구조에서 온 상위클래스나 하위클래스처럼 다루기 위한 방법입니다.

Swift에서 타입 변환은 `is`와 `as`라는 연산자로 구현할 수 있으며, 이 두 연산자는 값의 타입을 체크하거나 다른 타입으로 변환하는 간단하고 표현적인 방법을 제공합니다.

또한 해당 타입이 프로토콜에 적합하지 아닌지 체크하기 위해서 타입 변환을 사용할 수 있으며, 보다 자세한 사항은 [Protocol Conformance](링크)를 참조하시기 바랍니다.

## 타입 캐스팅을 위한 클래스 계층 정의(Defining a Class Hierarchy for Type Casting)

당신은 특정한 클래스의 인스턴스의 타입을 체크하거나 인스턴스를 같은 계층의 또다른 클래스로 변환하기 위해서 클래스들과 하위클래스들의 계층정보를 사용한 타입캐스팅을 할 수 있습니다. 아래의 세 가지의 코드조각(code snippets)는 타입 캐스팅이 사용되는 예제를 보여주기 위한 계층적인 클래스들과 각각의 클래스들의 인스턴스를 포함하는 배열(array)를 정의하고 있습니다.

첫 번째 코드 조각은 `MediaItem`이라는 새로운 기본 클래스(base class)를 정의하고 있습니다. 이 클래스는 디지털 미디어 라이브러리에 있는 모든 아이템들을 위한 기본적인 기능을 제공합니다. 특히   `String` 타입의 `name` 속성(Property)를 선언하고, `init name` initializer를 통해서 초기화합니다(이것은 모든 미디어 아이템(영화나 노래)들이 이름을 가지고 있다고 가정합니다)

```swift
class MediaItem {
    var name: String
    init(name: String) {
        self.name = name
    }
}
```

다음 코드 조각은 `MediaItem`의 두 가지 하위클래스(subclasses)들입니다. 첫 번째 하위클래스인 `Moive`는 내부적으로 영화에 관한 추가적인 데이터를 가지고 있는데. 이는 `director`라는 속성 및 초기화 부분을 `MediaItem`클래스의 initalizer의 윗부분에 추가할 수 있습니다. 두 번째 하위 클래스인 `Song`도 `artist` 속성의 관한 내용을 선언하고 base class의 윗부분에서 이를 초기화합니다:
```swift
class Movie: MediaItem {
    var director: String
    init(name: String, director: String) {
        self.director = director
        super.init(name: name)
    }
}
 
class Song: MediaItem {
    var artist: String
    init(name: String, artist: String) {
        self.artist = artist
        super.init(name: name)
    }
}
```
마지막 코드 조각은 2개의 `Movie` 인스턴스와 3개의 `Song` 인스턴스를 포함하는 `library`로 불리는 상수형 배열(constant array)를 만듭니다. `library` 배열의 타입은 각각의 배열 내부의 콘텐츠를 초기화 하는 타입으로 추정됩니다. Swift의 타입 체커는 `Movie`나 `Song`이 공통의 상위 클래스(superclass)인 `MediaItem`을 가진다고 추정할 수 있고, 따라서 `library`의 타입은  `[MediaItem]`로 추정됩니다 :
```swift
let library = [
    Movie(name: "Casablanca", director: "Michael Curtiz"),
    Song(name: "Blue Suede Shoes", artist: "Elvis Presley"),
    Movie(name: "Citizen Kane", director: "Orson Welles"),
    Song(name: "The One And Only", artist: "Chesney Hawkes"),
    Song(name: "Never Gonna Give You Up", artist: "Rick Astley")
]
// the type of "library" is inferred to be [MediaItem]
```
`library`에 저장된 요소들은 뒤에서 여전히 `Movie`와 `Song`인스턴스입니다. 그러나, 만일 당신이 이 배열의 내용을 iterate 한다면, 아이템은 `Movie`나 `Song`이 아닌, `MediaItem`의 타입으로 돌아옵니다. 그들의 타입으로 돌리기 위해, 그들의 타입을 체크하고, 아래에 설명된 대로, 다운캐스트를 통해 다른 타입으로 바꾸어야 합니다.

## 타입 체크(Checking Type)

어떠한 인스턴스가 확실히 하위클래스 타입인지 아닌지를 체크하기 위해서는 타입 체크 연산자인 `is`를 이용합니다. 이 타입체크용 연산자는 만일 해당 인스턴스가 해당 하위 클래스라면 `true`를, 아니라면 `false`를 반환합니다.
아래의 예시는 `library` 배열에 있는 `Movie`의 인스턴스의 수와 `Song`의 인스턴스의 수를 세기 위한 `movieCount`와 `songCount`라는 두 개의 변수를 선언하는 것을 보여줍니다.
```swift
var movieCount = 0
var songCount = 0
 
for item in library {
    if item is Movie {
        movieCount += 1
    } else if item is Song {
        songCount += 1
    }
}
 
print("Media library contains \(movieCount) movies and \(songCount) songs")
// Prints "Media library contains 2 movies and 3 songs"
```
이 예시에서는 `library`배열의 모든 아이템에 대해서 작업하며, 각각의 1번의 과정마다 `for-in` 루프는 `item` 상수를 배열의 다음 `MediaItem`으로 설정합니다.

각각의 아이템이 만일 `Movie` 인스턴스이면 `item is Movie`에서 `true`를 아니라면 `false`를 반환하고, 이와 유시하게 아이템이 만일 `Song`의 인스턴스인지 아닌지에 따라 `item is Song` 체크부분의 리턴값이 결정됩니다. `for-in` 루프의 마지막이 되면, `moveCount`와 `songCount`의 값을 보고 전체 `MediaItem` 인스턴스중에 각각의 타입이 얼마만큼의 수가 들어있는지 찾아낼 수 있습니다.

## 다운캐스팅( Downcasting )

특정 클래스 타입의 변수나 상수는 은밀히 자식 클래스의 인스턴스로 추론될 것입니다. 당신이 위와 같은 케이스를 믿는 경우, 당신은 타입 변환 연산자인 `as?` 나 `as!`를 통하여 하위클래스타입으로 다운캐스팅을 시도 할 수 있습니다.

다운캐스팅은 실패할 수 있기때문에, 타입 캐스팅연산자는 두 가지의 다른 형태를 가집니다. 조건 형식인 `as?`는 당신이 다운캐스트를 시도한 타입의 옵션 값을 리턴합니다. 강제 형식인 `as!`는 다운캐스트를 시도하고, 강제적으로 결과를 벗겨내는 벗겨내는 것을 하나의 조합된 작업으로 시도합니다.

다운캐스트가 성공할지 확신을 가지지 못한다면, 타입캐스트 오퍼레이터의 조건 형식(`as?`)을 사용하세요. 이 오퍼레이터의 형식은 항상 옵션 값을 리턴할 것이고, 다운캐스트가 불가능하다면, `nil`을 리턴할 것입니다. 이것으로 다운캐스팅의 성공 여부를 체크할 수 있습니다.

다운캐스트가 항상 성공한다고 확신하는 경우에는 타입캐스트 오퍼레이터의 강제 형식(`as!`)을 사용하세요. 이 형태의 오퍼레이터는 다운캐스트를 올바르지 않은 것으로 시도할 때, 런타임에러를 발생할 것입니다.

아래의 예시는 `library` 내의 각 `MediaItem`을 반복해가면서 각 아이템들을 위한 적절한 설명을 출력합니다. 이를 위해서 각 아이템이 단순히 `MediaItme`이 아닌 진정으로 `Movie`나 `Song`인지 액세스 할 필요가 있습니다. 이를 위해서 설명을 출력하기 위해서 `Movie`나 `Song`의 `director`나 `artist` 속성에 접근할 수 있게 할 필요가 있습니다.

예시에서 배열내의 각각의 item은 `Movie`이거나 `Song` 일 것입니다. 당신은 각각의 아이템이 실제 어떠한 클래스인지 미리 알 수가 없습니다. 그러므로 조건 형식인 `as?` 연산자를 사용하여 루프를 통해 각 케이스마다 다운캐스팅을 체크하는 것이 적절합니다:

```swift
for item in library {
    if let movie = item as? Movie {
        print("Movie: \(movie.name), dir. \(movie.director)")
    } else if let song = item as? Song {
        print("Song: \(song.name), by \(song.artist)")
    }
}
 
// Movie: Casablanca, dir. Michael Curtiz
// Song: Blue Suede Shoes, by Elvis Presley
// Movie: Citizen Kane, dir. Orson Welles
// Song: The One And Only, by Chesney Hawkes
// Song: Never Gonna Give You Up, by Rick Astley
```
이 예시는 현재 아이템이 `Movie`라고 생각하고 다운캐스팅을 시도하는 것으로 시작합니다. 아이템이 `MediaItem` 인스턴스이므로 이 아이템은 `Movie`일 수 있습니다. 또한 똑같은 이유로 `Song`도 가능합니다, 혹은 오로지 단순히 `MediaItem`일 수도 있습니다. 이것이 불확실성 때문에, `as?` 타입변환 연산자를 사용하여 하위 클래스로의 다운캐스팅을 시도시에 옵션값을 반환합니다. 그 결과 `item as Moive`의 결과는 `Moive?` 타입, 즉 "옵셔널 `Movie`"이 됩니다.

라이브러리 배열안의 `Song` 인스턴스에 `Movie`로 다운 캐스팅하는 것을 적용하면 실패합니다. 이것에 대처하기 위해, 위의 예시에서는 결과로 나온 옵셔널 `Movie`값이 실제로 값을 가지고 있는지 체크하기 위한(이 경우는 다운캐스팅이 성공했는지 아닌지 찾는 과정이다) 옵셔널 바인딩을 사용합니다. 이 optional binding 은 `if let movie = is as? Moive`와 같이 작성하고, 다음과 같이 해석됩니다.

"해당 아이템을 `Movie`로 생각하고 접근을 시도합니다. 만일 해당 작업이 상공하면, 반환된 optional `Movie`값을 저장할 `movie`라고 불리는 새로운 임시 상수값을 설정합니다."

만일 다운 캐스팅이 성공한다면, `movie`의 속성들을 가지고 `director`와 같은 `Moive` 인스턴스를 위한 설명을 출력하는데 사용할 수 있습니다. 비슷한 원리로 `Song` 인스턴스를 위한 체크를 하여, `library`에서 `Song` 인스턴스를 찾기만 한다면, `artist`와 같은 적절한 설명을 출력할 수 있습니다.

>NOTE
>변환(Casting)은 실제로 해당 인스턴스를 수정하거나 그 값을 바꾸는 것이 아닙니다. 근본적인 인스턴스는 처음상태 그대로 남아있습니다. 이것은 간단히 특별한 것이며, 캐스팅된 타입의 인스턴스로서 접근이 가능한 것입니다.

## Type Casting for Any and AnyObject

Swift는 특정한 타입을 가지지 않는 상태로 작업하기 위한 두 가지의 특별한 타입을 제공합니다:

* `AnyObject`는 어떠한 클래스타입의 인스턴스라도 표현할 수 있습니다.
* `Any`는 함수형의 타입을 포함한, 어떠한 타입의 인스턴스라도 표현할 수 있습니다.

>NOTE
>`Any`나 `AnyObject`는 오로지 당신이 명시적으로 behavior나 그들이 제공하는 능력들이 필요한 경우에만 사용합니다. 이는 항상 당신의 코드 속에서 당신이 예상한 특정한 형태의 타입으로 작동하는 것이 더 낫습니다.

### AnyObject

Cocoa APIs를 이용하여 작업을 할 때, 종종 `[AnyObject]` 타입의 배열 또는 "어떤 오브젝트 타입의 값의 배열"을 받을 것입니다. Objective-C는 현재 명시적으로 타입된 배열을 지원하지만, 이 언어의 이전 버전들은 이 특성이 없습니다. 그러나, 당신은 배열에서 제공되는 알고있는 API에 대한 정보에서, 배열과 같은 것에 포함된 오브젝트의 타입에 대해 종종 자신감을 가질 수 있습니다.

이런 상황에서, 당신은 배열안의 아이템을 `AnyObject`보다 더 구체적인 클래스로 다운캐스트하기 위해, 옵셔널 벗김 없이, 타입캐스트 오퍼레이터의 강제 버전(`as!`)을 사용할 수 있습니다.

아래의 예제는 `[AnyObject]` 타입의 배열을 정의한 것이고, 세 개의 `Movie` 클래스 인스턴스로 설정하였습니다.

```swift
let someObjects: [AnyObject] = [
    Movie(name: "2001: A Space Odyssey", director: "Stanley Kubrick"),
    Movie(name: "Moon", director: "Duncan Jones"),
    Movie(name: "Alien", director: "Ridley Scott")
]
```
이 배열은 오로지 `Moive` 인스턴스만 가지는 것을 이미 알고 있으므로, 당신은 타입캐스트 오퍼레이터의 강제 버전(`as!`)을 사용해, 직접적으로 옵셔널이 아닌 `Movie`로 다운캐스트하고 벗김을 할 수 있습니다.

```swift
for movie in someObjects as! [Movie] {
    print("Movie: \(movie.name), dir. \(movie.director)")
}
// Movie: 2001: A Space Odyssey, dir. Stanley Kubrick
// Movie: Moon, dir. Duncan Jones
// Movie: Alien, dir. Ridley Scott
```
### Any

다음은 클래스가 아닌 타입과 함수 타입을 포함한 여러 가지 다른 타입을 섞어서 작업하기 위한 `Any`를 사용한 예제입니다. 이 예제는 `Any`타입의 값을 저장할 수 있는 `things`이라는 한 배열을 생성합니다.
```swift
var things = [Any]()
 
things.append(0)
things.append(0.0)
things.append(42)
things.append(3.14159)
things.append("hello")
things.append((3.0, 5.0))
things.append(Movie(name: "Ghostbusters", director: "Ivan Reitman"))
things.append({ (name: String) -> String in "Hello, \(name)" })
```
`things`배열은 두 개의 `int` 값, 두 개의 `Double`값, 하나의 `String`값, 하나의 `(Double, Double)` 타입의 tuple, 그리고 영화 "Ghostbusters"와 `String` 값을 받아서 다른 `String` 값을 내보내는 클로저 표현식을 포함합니다.

당신은 `Any`나 `AnyObject`로 알고있는 변수에서 특정한 타입의 상수나 변수 찾기 위한 스위치 구문의 `case` 항목에 `is`와 `as` 연산자를 사용할 수 있습니다. 아래의 예제는 아이템들의 `things` 배열의 각 아이템을 반복하면서 스위치 문을 통해서 각각의 타입을 요청합니다. 몇몇의 `switch`문의 `case`항목에서 비교항목과 동일한 값과 타입을 가지는 상수의 경우는 해당 값과 형태를 출력합니다:

```swift
for thing in things {
    switch thing {
    case 0 as Int:
        print("zero as an Int")
    case 0 as Double:
        print("zero as a Double")
    case let someInt as Int:
        print("an integer value of \(someInt)")
    case let someDouble as Double where someDouble > 0:
        print("a positive double value of \(someDouble)")
    case is Double:
        print("some other double value that I don't want to print")
    case let someString as String:
        print("a string value of \"\(someString)\"")
    case let (x, y) as (Double, Double):
        print("an (x, y) point at \(x), \(y)")
    case let movie as Movie:
        print("a movie called \(movie.name), dir. \(movie.director)")
    case let stringConverter as String -> String:
        print(stringConverter("Michael"))
    default:
        print("something else")
    }
}
 
// zero as an Int
// zero as a Double
// an integer value of 42
// a positive double value of 3.14159
// a string value of "hello"
// an (x, y) point at 3.0, 5.0
// a movie called Ghostbusters, dir. Ivan Reitman
// Hello, Michael
```

