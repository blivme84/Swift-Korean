#  06 컬렉션 타입 (Collection Types)
> Translator : 유정협 (justin.yoo@aliencube.com)

스위프트는 여러 값들을 한꺼번에 저장하기 위해 배열(Array), 셋(Set)과 딕셔너리(Dictionary)로 알려진 세 가지 _컬렉션 타입_을 제공합니다. 셋은 정렬되지 않은 특별한 값들의 컬렉션입니다. 딕셔너리는 정렬되지 않은 키-밸류 결합의 컬렉션입니다.

![](images/CollectionTypes_intro_2x.png)



스위프트에서 배열과 셋, 딕셔너리는 항상 자신이 저장하고자 하는 키와 값의 타입을 확인합니다. 이것은 다른 타입을 가진 값을 배열이나 딕셔너리에 실수로라도 저장하지 못한다는 것을 의미한다. 이는 또한 배열과 딕셔너리에서 값을 가져올 때 어떤 타입의 값을 가져올 수 있는지 확신할 수 있다는 의미이기도 합니다. 

> NOTE
> 스위프트의 배열, 셋, 딕셔너리 타입은 generic collections로서 구현될 수 있습니다. generic type과 collections에 관한 더 자세한 정보는 [Generics]()를 참고하세요.

## Mutability of Collections

만약 당신이 배열이나 셋, 딕셔너리를 만들고, 그것에 변수를 할당한다면, collection은 그것을 mutable로 만들 것입니다. 이것은 당신이 collection을 생성한 뒤에 collection 안의 아이템을 추가하거나, 삭제, 바꾸기 등의 변경(혹은 mutate) 할 수 있음을 의미합니다. 만약 당신이 배열이나 셋, 딕셔너리를 상수로 할당한다면, collection은 immutable이고, 크기나 내용이 변경될 수 없습니다.

> Note
>
> immutable collection을 만드는 것은 collection이 변화가 필요하지 않는 모든 경우에 대해 좋은 연습입니다. 그렇게 하는 것은 Swift 컴파일러가 당신의 만든 collection의 성능 최적화를 가능하게 합니다.

## 배열 (Arrays)

배열은 같은 타입을 가진 여러개의 값을 순서대로 저장합니다. 한 배열 안에서는 같은 값이 여러 다른 위치에서 나타날 수 있습니다.

> Note
>
> Swift의 `Array` 타입은 Foundation의 `NSArray` 클래스의 연장형입니다.(bridged to)
>
> Foundation과 Cocoa에서 `Array`를 사용하는 것에 대해 더 자세한 정보는 [Using Swift with Cocoa and Objective-C (Swift 2.2)]()에서 확인하세요.


### 배열 타입 축약 문법 (Array Type Shorthand Syntax)

스위프트의 배열 타입을 전체로 다 써보자면, `Array<Element>`가 됩니다. 여기서 `Element`는 배열에 저장을 허용할 값들의 타입입니다. 이것을 축약형으로 `[Element]`로 쓸 수 있습니다. 이 두 가지 형태가 기능적으로는 동일하지만, 축약형이 권장됩니다. 이 축약 형태의 배열이 이 가이드 문서에서도 계속 쓰일 것입니다.


### 비어있는 배열 만들기 (Creating an Empty Array)

배열은 배열 표현식을 통해서 초기화를 시킬 수 있습니다. 

```swift
var someInts = [Int]()
print("someInts is of type [Int] with \(someInts.count) items.")
// Prints "someInts is of type [Int] with 0 items."
```

`someInts` 변수의 타입이 초기화자의 타입인 `[Int]`로 추론됨을 명심하세요.

그 대신에, 만약 function argument나 미리 타입된 변수나 상수와 같이 context가 타입 정보를 제공한다면, 당신은 빈 배열 리터럴로 비어있는 배열을 만들 수 있습니다. 이것은 `[]`와 같이 비어있는 대괄호의 쌍으로 쓰여집니다.

```swift
someInts.append(3)
// someInts now contains 1 value of type Int
someInts = []
// someInts is now an empty array, but is still of type [Int]
```

### 기본 값으로 배열 만들기 (Creating an Array with a Default Value)

Swift의 `Array` 타입은 같은 기본값으로 특정한 크기의 배열로 세팅하는 초기화자를 제공합니다. 당신은 이 초기화자에 새로운 배열에 포함될 아이템의 개수(`count`라 부릅니다.)와 적절한 타입의 포함될 값(`repeatedValue`라 부릅니다.)을 통과시킵니다.

```swift
var threeDoubles = [Double](count: 3, repeatedValue: 0.0)
// threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]
```

### 두 배열을 합쳐서 배열 만들기 (Creating an Array by Adding Two Arrays Together)

당신은 기존에 존재하는 호환이되는 두 배열을 `+` 추가 오퍼레이터로 합쳐서 새로운 배열을 만들 수 있습니다. 새로운 배열의 타입은 당신이 합치는 두 배열의 타입에서 추론됩니다.

```swift
var anotherThreeDoubles = [Double](count: 3, repeatedValue: 2.5)
// anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]
 
var sixDoubles = threeDoubles + anotherThreeDoubles
// sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]
```

### Creating an Array with an Array Literal

배열은 배열 리터럴로 초기화할 수 있습니다. 이것은 배열 컬렉션으로서 하나나 더 많은 값을 쓰는 축약형입니다. 배열 표현식에 대괄호로 둘러싸고, 콤마로 값들을 구분하는 형태로 하여 여러 개의 값들을 넣습니다.

```swift
[value 1, value 2, value 3]
```

아래는 `String` 타입의 값들을 저장하는 `shoppingList`라는 배열을 생성하는 예제입니다.

```swift
var shoppingList: [String] = ["Eggs", "Milk"]
// shoppingList has been initialized with two initial items
```

`shoppingList` 변수는 `[String`로 씀으로 "`String` 타입의 값들을 갖는 배열"로 선언되었습니다. 이렇게 `String` 타입을 갖는 것으로 배열 타입을 지정했기 때문에 이 배열은 오직 `String` 값들만을 저장할 수 있습니다. 여기서 `shoppingList` 배열은 두 "`Eggs`", "`Mink`" `String` 값을 배열 표현식으로 지정하여 초기화를 시켰습니다.

> NOTE
> 이 `shoppingList` 배열은 다음에 나올 예제에서 더 많은 쇼핑 목록을 추가하기 때문에 상수를 위한 `let` introducer가 아닌 `var` introducer를 통해 변수로 지정하였습니다.

이 경우에 배열 표현식은 두 `String` 값 이외에는 다른 것을 포함하지 않습니다. 이것은 `shoppingList` 변수의 타입 정의 – 오직 `String` 타입의 값들만 저장할 수 있는 배열 – 와 일치합니다. 따라서, 배열 표현식을 이용하여 `shoppingList` 변수를 초기화 하는 것이 허용됩니다.

스위프트의 타입 추정 덕분에 당신은 배열 표현식을 이용하여 같은 타입을 갖는 변수를 초기화시킨다면 배열 타입을 쓸 필요가 없습니다. 따라서, `shoppingList` 변수의 초기화는 아래와 같이 좀 더 간결한 형태로도 가능합니다.

```swift
var shoppingList = ["Eggs", "Mink"]
```

배열 표현식의 모든 값들이 모두 같은 타입이기 때문에 스위프트는 `[String]`이 `shoppingList` 변수의 사용에 맞는 타입이라고 추정할 수 있습니다.

### Accessing and Modifying an Array

배열은 메소드와 프로퍼티를 통해 접근과 수정이 가능합니다. 혹은 subscript 문법을 사용할 수도 있습니다.

배열 안에 값이 몇 개나 있는지를 확인하기 위해 읽기 전용 속성인 `count` 프로퍼티를 사용합니다:

```swift
print("The shopping list contains \(shoppingList.count) items.")
// Prints "The shopping list contains 2 items."
```

Boolean 값을 반환하는 `isEmpty` 프로퍼티를 이용하면 `count` 프로퍼티 값이 `0`인지 아닌지 곧바로 확인할 수 있습니다:

```swift
if shoppingList.isEmpty {
    print("The shopping list is empty.")
} else {
    print("The shopping list is not empty.")
}
// Prints "The shopping list is not empty."
```

새로운 값을 배열의 마지막에 추가하는 것은 `append(_:)` 메소드를 이용하면 됩니다:

```swift
shoppingList.append("Flour")
// shoppingList now contains 3 items, and someone is making pancakes
```

추가 할당 연산자인 `+=`를 이용하여 배열의 마지막에 하나 이상의 새로운 값을 추가할 수 있습니다.

```swift
shoppingList += ["Baking Powder"]
// shoppingList now contains 4 items
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]
// shoppingList now contains 7 items
```

배열로부터 값을 찾는 것은 배열 변수 바로 뒤에 대괄호를 사용해서 찾고자 하는 값의 인덱스값을 이용하면 됩니다:

```swift
var firstItem = shoppingList[0]
// firstItem is equal to "Eggs"
```

> Note
>
> 배열의 첫번째 값이 갖는 인덱스는 `1`이 아니고, `0`입니다. 스위프트에서 배열의 인덱스는 항상 0부터 시작합니다.

Subscript 문법을 사용하면 지정한 인덱스에 이미 존재하는 값을 바꿀 수 있습니다:

```swift
shoppingList[0] = "Six eggs"
// the first item in the list is now equal to "Six eggs" rather than "Eggs"
```

Subscript 문법을 이용하면 범위를 줘서 한꺼번에 값을 바꿀 수도 있습니다. 심지어는 바꾸려고 하는 범위가 실제 값의 크기와 달라도 그게 가능합니다. 아래 예제는 `shoppingList` 배열에 있는 "`Chocolate Spread`", "`Cheese`", "`Butter`" 값을 "`Bananas`", "`Apples`"으로 변경합니다:

```swift
shoppingList[4...6] = ["Bananas", "Apples"]
// shoppingList now contains 6 items
```

> NOTE
> Subscript 문법을 사용해서 새 값을 배열의 마지막에 추가할 수 없습니다.

특정한 인덱스에 배열 값을 넣고 싶다면 배열의 `insert(_:atIndex:)` 메소드를 이용합니다:

```swift
shoppingList.insert("Maple Syrup", atIndex: 0)
// shoppingList now contains 7 items
// "Maple Syrup" is now the first item in the list
```

이것은 `insert(_:atIndex:)` 메소드를 이용하여 "`Mayple Syrup`"이란 새로운 값을 `shoppingList` 배열의 가장 앞 `0` 인덱스 값을 가진 곳에 추가하였습니다.

비슷한 방식으로 배열에서 값을 지울 수도 있습니다. `removeAtIndex(_:)` 메소드를 이용하면 되는데, 이 메소드는 배열내 주어진 인덱스에서 특정 값을 지우고 난 후 그 지워진 값을 반환합니다. 이 지워진 값은 필요하지 않다면 무시하면 됩니다..

```swift
let mapleSyrup = shoppingList.removeAtIndex(0)
// the item that was at index 0 has just been removed
// shoppingList now contains 6 items, and no Maple Syrup
// the mapleSyrup constant is now equal to the removed "Maple Syrup" string
```

> Note
>
> 만약 당신이 인덱스의 존재 범위 바깥에서 값을 수정하거나 접근하고자 한다면, 런타임에러를 발생할 것입니다. 당신은 배열의 `count` 속성을 사용해, index가 유효한지를 먼저 체크할 수 있습니다. `count`가 0인 경우를 제외하고(비어있는 배열), 배열이 0에서부터 시작하기에, 배열의 가장 큰 index는 항상 `count - 1 `입니다. 

배열에서 값을 지우고난 다음에 생기는 공백은 자동으로 지워집니다. 따라서, `0` 인덱스에 해당하는 값은 이제 "`Six eggs`"입니다:

```swift
firstItem = shoppingList[0]
// firstItem is now equal to "Six eggs"
```

만약 배열의 마지막 값을 지우고 싶다면 `removeLast()` 메소드를 이용합니다. 이 메소드를 이용하면 `removeAtIndex(_:)` 메소드를 `count` 프로퍼티와 함께 사용하는 수고를 덜어줍니다. `removeAtIndex(_:)` 메소드와 마찬가지로 `removeLast` 메소드 역시 지워진 값을 반환합니다:

```swift
let apples = shoppingList.removeLast()
// the last item in the array has just been removed
// shoppingList now contains 5 items, and no apples
// the apples constant is now equal to the removed "Apples" string
```

### Iterating Over an Array

`for-in` 반복문을 사용하면 배열 안의 모든 값들에 접근할 수 있습니다:

```swift
for item in shoppingList {
    print(item)
}
// Six eggs
// Milk
// Flour
// Baking Powder
// Bananas
```

만약 배열 안의 개별적인 값들과 그에 해당하는 인덱스가 함께 필요하다면 전역 함수인 `enumerate()`를 사용해서 배열을 돌릴 수 있습니다. `enumerate()` 함수는 배열내 각각의 값에 대해 인덱스와 결합한 튜플 값을 반환합니다. 반복문을 돌리는 도중 이 튜플을 변수나 상수로 분리하여 사용할 수 있습니다:

```swift
for (index, value) in shoppingList.enumerate() {
    print("Item \(index + 1): \(value)")
}
// Item 1: Six eggs
// Item 2: Milk
// Item 3: Flour
// Item 4: Baking Powder
// Item 5: Bananas
```

`for-in` 반복문에 대해서는 [For 반복문]() 항목을 참고하기 바랍니다.

## Sets

Set은 정렬순서가 없는 컬렉션에서 같은 타입의 값을 구분해 저장합니다. 정렬 순서가 중요하지 않다면, 혹은 아이템이 꼭 한 번만 나타나야 하는 경우, set을 배열 대신에 사용할 수 있습니다.

> Note
>
> Swift의 `Set` 타입은 Foundation의 `NSSet` 클래스에서 파생되었습니다.
>
> Cocoa와 Foundation의 `Set`의 사용에 관해서 [*Using Swift with Cocoa and Objective-C (Swift 2.2)*]()를 참고하세요.

### Hash Values for Set Types

set에 값을 저장하기 위해 타입은 반드시 hashable이어야 합니다. - 즉, type은 자신 스스로 hash 값을 계산하기 위한 방법을 제공해야 합니다. hash 값은 `Int` 값으로, 모든 비교가능한 object에 대해 동등합니다. 즉, 만약 `a == b`는 `a.hashValue == b.hashValue`를 따릅니다.

Swift의 기본 타입(`String`, `Int`, `Double`과 `Bool`과 같은)은 기본적으로 해쉬 가능합니다. 그래서, 기본적으로 그것들을 set 타입 값이나 딕셔너리 키 타입으로 사용할 수 있습니다. values에 결합되지 않은 Enumeration 케이스 값([Enumerations]()에 설명되어 있습니다.)은 기본적으로 해쉬 가능합니다.

> NOTE
>
> Swift의 기본 라이브러리로부터 `Hashable` 프로토콜을 따르도록 만들면, 자신만의 타입을 set 값 타입이나 dictionary 키 타입으로 사용할 수 있습니다. `Hashable` 프로토콜을 따르는 타입은 `hashValue`에 의해서 얻을 수 있는 `Int` 속성을 포함해야 합니다. 타입의 `hashValue` 속성에 의해서 돌려지는 값은 같은 혹은 다른 프로그램의 다른 실행을 넘어서 같은 것이 요구되지 않습니다.
>
> 왜냐하면, `Hashable` 프로토콜은 `Equatable`을 따르기에, 따라진 타입은 또한 "같음" 오퍼레이터(`==`)의 구현을 제공해야만 합니다. `Equatable` 프로토콜은 동등 관계가 되기 위해 `==`의 구현을 따르기를 요구합니다. 즉, `==`의 구현은 모든 `a`, `b`, `c`의 값에 대해 다음의 세 조건을 만족해야 합니다.
>
> * `a == a` (Reflexivity)
> * `a == b`는 `b == a`를 암시 (Symmetry)
> * `a == b && b == c`는 `a == c`를 암시 (Transitivity)
>
> 프로토콜에 대한 더 많은 정보는 [프로토콜]()을 참조하기 바랍니다.

### Set Type Syntax

Swift의 타입인 Set은 `Set<Element>`로 쓰여집니다. 여기에서 `Element`는 set에 저장되는 것을 허용하는 타입입니다. 배열과는 달리, set은 축약형이 없습니다.

### Creating and Initializing an Empty Set

초기화자 문법을 사용해서 특정 타입의 비어있는 set을 만들 수 있습니다.

```swift
var letters = Set<Character>()
print("letters is of type Set<Character> with \(letters.count) items.")
// Prints "letters is of type Set<Character> with 0 items."
```

> Note
>
> `letters` 변수의 타입은 초기화자의 타입으로부터 `Set<Character>`로 추론됩니다.

대신에, 만약 컨텍스트가 함수 변수나 이미 타입된 변수나 상수와 같은 타입 정보를 미리 제공한다면, 비어있는 set을 비어있는 배열 리터럴로 만들 수 있습니다.

```swift
letters.insert("a")
// letters now contains 1 value of type Character
letters = []
// letters is now an empty set, but is still of type Set<Character>
```

### Creating a Set with an Array Literal

배열 리터럴로 하나나 더 많은 값을 set 컬렉션의 축약형으로서 set 초기화자를 사용할 수 있습니다.

다음의 예는 `String` 값을 저장하기 위한 `favoriteGenres`라 불리는 set을 만듭니다.

```swift
var favoriteGenres: Set<String> = ["Rock", "Classical", "Hip hop"]
// favoriteGenres has been initialized with three initial items
```

`favoriteGenres` 변수는 `Set<String>`으로 씀으로서, "`String` 값의 set"으로 선언됩니다. 이 특정한 set이 `String`의 값 타입을 명시하였기 때문에, 이것은 `String` 값만 저장할 수 있습니다. 여기에서 `favoriteGenre` set은 배열 리터럴 안에 쓰여진 세 `String` 값으로 초기화됩니다. (`"Rock"`, `"Classical"`, `"Hip hop"`)

> Note
>
> `favoriteGenres` set은 상수(`let` introducer로)가 아닌 변수(`var` introducer로)로 선언되었습니다. 왜냐하면, 아이템이 아래의 예제에서 추가나 삭제될 것이기 때문입니다.

set 타입이 배열 리터럴 혼자로부터는 추론될 수 없습니다. 그래서 `Set` 타임은 명시적으로 선언되어야만 합니다. 하지만, Swift의 타입 추론 떄문에, set을 같은 타입의 포함하는 값의 배열 리터럴로 초기화 할 때 타입을 기록하지 않아도 됩니다. `favoriateGenres`의 초기화는 다음과 같이 짧게 쓰여질 수 있습니다.

```swift
var favoriteGenres: Set = ["Rock", "Classical", "Hip hop"]
```

배열 리터럴 안에 있는 모든 값이 같은 타입이기 때문에, Swift는 `favoriateGenres` 변수의 옳은 타입을 `Set<String>`로 추론할 수 있습니다.

### Accessing and Modifying a Set

set을 메서드와 속성을 통해 접근 및 수정합니다.

set안의 아이템 수를 알아내기 위해, 읽기 전용인 `count` 속성을 체크하세요.

```swift
print("I have \(favoriteGenres.count) favorite music genres.")
// Prints "I have 3 favorite music genres."
```

`count`가 `0`인 경우를 체크하는 축약형으로, Boolean `isEmpty` 속성을 사용하세요.

```swift
if favoriteGenres.isEmpty {
    print("As far as music goes, I'm not picky.")
} else {
    print("I have particular music preferences.")
}
// Prints "I have particular music preferences."
```

set의 `insert(_:)` 메서드를 호출함으로서, set에 새로운 아이템을 추가할 수 있습니다.

```swift
favoriteGenres.insert("Jazz")
// favoriteGenres now contains 4 items
```

set의 `remove(_:)` 메서드를 호출함으로서, 아이템을 삭제할 수 있습니다. 이것은 만약 아이템이 set의 멤버라면 삭제하고, 삭제된 값을 돌려줍니다. 만약 리턴값이 `nil`이라면, set이 그 아이템을 가지고 있지 않은 것입니다. 또한, set의 모든 아이템은 `removeAll()` 메서드로 지워집니다.

```swift
if let removedGenre = favoriteGenres.remove("Rock") {
    print("\(removedGenre)? I'm over it.")
} else {
    print("I never much cared for that.")
}
// Prints "Rock? I'm over it."
```

set이 특정 아이템을 포함하는지 알아보기 위해 `contains(_:)` 메서드를 사용합니다.

```swift
if favoriteGenres.contains("Funk") {
    print("I get up on the good foot.")
} else {
    print("It's too funky in here.")
}
// Prints "It's too funky in here."
```

### Iterating Over a Set

`for-in` 루프에서 set안의 값들에 대해 iterate 할 수 있습니다.

```swift
for genre in favoriteGenres {
    print("\(genre)")
}
// Classical
// Jazz
// Hip hop
```

`for-in` 루프에 대한 더 자세한 정보는 [For-In Loops]()를 참고하세요

Swift의 `Set` 타입은 지정된 순서를 가지고 있지 않습니다. set의 값에 대해 특정 순서로 iterate하기 위해서, `sort()` 메서드를 사용합니다. 이것은 set의 원소를 `<` 오퍼레이터를 사용해 정렬해 리턴합니다.

```swift
for genre in favoriteGenres.sort() {
    print("\(genre)")
}
// Classical
// Hip hop
// Jazz
```

## Performing Set Operations

set 오퍼레이션의 기본적인 것들(두 set을 합치기, 두 set에서 공통요소를 가지고 있는지 파악하기, 두 셋이 전부 같은지, 약간 같은지, 같은 것이 전혀 없는지)을 효과적으로 수행할 수 있습니다.

### Fundamental Set Operations 

아래의 그림은 두 set(`a`, `b`)을 음영으로 set 다양한 오퍼레이션을 나타낸 것입니다.

![setVennDiagram_2x](images/setVennDiagram_2x.png)

* `intersect(_:)` 메소드는 두 set이 공통적으로 가진 값만으로 새로운 set을 만드는데 쓰입니다.
* `excelusiveOr(_:)` 메소드는 각각의 set에서, 하지만 공통적으로는 포함하지 않는 값들을 가지고 새로운 set을 만듭니다.
* `union(_:)` 메소드는 두 set에서 모든 값을 가지고 새로운 set을 만듭니다.
* `substract(_:)` 메소드는 특정 영역에 포함되지 않은 값을 가지고 새로운 set을 만듭니다.

```swift
let oddDigits: Set = [1, 3, 5, 7, 9]
let evenDigits: Set = [0, 2, 4, 6, 8]
let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]
 
oddDigits.union(evenDigits).sort()
// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
oddDigits.intersect(evenDigits).sort()
// []
oddDigits.subtract(singleDigitPrimeNumbers).sort()
// [1, 9]
oddDigits.exclusiveOr(singleDigitPrimeNumbers).sort()
// [1, 2, 9]
```

### Set Membership and Equality 

아래의 그림은 세 set(`a`, `b`, `c`)을 그린 것입니다. 중첩된 지역은 요소가 set 간에 공유되고 있음을 의미합니다. set `a`는 set `b`의 superset입니다. 왜냐하면, `a`가 `b`의 모든 원소를 포함하기 때문입니다. 대조적으로, set `b`는 set `a`의 subset입니다. 왜냐하면, `b`안의 모든 원소가 `a`에 의해 포함되기 때문입니다. set `b`와 set `c`는 서로 disjoint입니다. 왜냐하면, 그들은 서로 공통 요소가 없기 때문입니다.

![setEulerDiagram_2x](images/setEulerDiagram_2x.png)

* "동등" 오퍼레이터를 사용해(`==`) 두 셋이 같은 값들 전부를 포함하는지 비교합니다.
* `isSubsetOf(_:)` 메소드를 사용해, 특정 set 안에서, set의 값들이 포함되는지 알아봅니다.
* `isSupersetOf(_:)` 메소드를 사용해 특정 set안에서 모든 값이 set에 포함되는지 알아봅니다.
* `isStrictSubsetOf(_:)` 혹은 `isStrictSupersetOf(_:)` 메소드를 사용해, set이 subset 혹은 superset인지 알아봅니다. (but not equal to, a specified set.)
* `isDisjointWith(_:)` 메소드를 사용해, 두 set이 서로 공통된 값을 갖는지 알아봅니다.

```swift
let houseAnimals: Set = ["🐶", "🐱"]
let farmAnimals: Set = ["🐮", "🐔", "🐑", "🐶", "🐱"]
let cityAnimals: Set = ["🐦", "🐭"]
 
houseAnimals.isSubsetOf(farmAnimals)
// true
farmAnimals.isSupersetOf(houseAnimals)
// true
farmAnimals.isDisjointWith(cityAnimals)
// true
```

## Dictionaries

_딕셔너리_는 같은 타입을 가진 여러 개의 값을 저장하는 하나의 컨테이너입니다. 각각의 값은 유일한 키 값에 물려 있으며, 이 키 값은 딕셔너리 안에서 해당 값을 찾기 위한 식별자의 역할을 합니다. 배열의 값들과 달리 딕셔너리 안에 저장된 값은 어떤 순서가 정해져 있지 않습니다. 실제로 사전에서 어떤 단어의 정의를 찾는 것과 매우 같은 방식으로 딕셔너리 안에 정의된 식별자를 이용해서 값을 찾습니다.

> Note
>
> Swift의 `Dictionary` 타입은 Foundation의 `NSDictinoary` 클래스에서 파생되었습니다.
>
> Foundation과 Cocoa의 `Dictionary`의 사용에 대한 더 많은 정보는 [*Using Swift with Cocoa and Objective-C (Swift 2.2)*]()를 참고하세요.

### Dictionary Type Shorthand Syntax

Swift의 딕셔너리 타입을 제대로 쓰면, `Dictionary<Key, Value>` 형태로 쓸 수 있습니다. 여기서 `Key`는 딕셔너리의 키로서 사용되는 값의 타입이고, `Value`는 그 키에 대한 딕셔너리가 저장하는 값의 타입입니다.

> Note
>
> Dictionary `Key` 타입은 Set의 값 타입과 같이 `Hashable` 프로토콜을 따라야만 합니다.

딕셔너리의 축약형으로, `[Key: Value]`의 형태로 쓸 수 있습니다. 비록 두 형태는 기능적으로 동일하지만, 축약형이 더 선호됩니다. 그리고 딕셔너리의 타입을 추론할 때의 가이드로 사용됩니다.

### Creating an Empty Dictionary

배열과 마찬가지로 초기화 문법을 이용하여 비어있는 딕셔너리 타입을 만들 수 있습니다:

```swift
var namesOfIntegers = [Int: String]()
// namesOfIntegers is an empty [Int: String] dictionary
```

이 예제는 사람이 읽을 수 있는 정수 값의 이름을 저장하기 위한 `[Int: String]` 타입의 빈 딕셔너리를 만듭니다. 키는 `Int` 타입, 밸류는 `String` 타입입니다.

만약 컨텍스트에서 이미 해당 타입에 대한 정보를 제공한다면, 빈 딕셔너리 표현식을 이용하여 딕셔너리를 초기화하여 만들 수 있습니다. 빈 딕셔너리 표현식은 `[:]` 으로 나타낼 수 있다:

```swift
namesOfIntegers[16] = "sixteen"
// namesOfIntegers now contains 1 key-value pair
namesOfIntegers = [:]
// namesOfIntegers is once again an empty dictionary of type [Int: String]
```

### Creating a Dictionary with a Dictionary Literal

딕셔너리는 딕셔너리 표현식을 통해서 초기화를 시킬 수 있습니다. 딕셔너리 표현식은 앞에서 살펴봤던 배열 표현식과 비슷한 문법입니다. 딕셔너리 표현식은 하나 또는 그 이상의 키/밸류 쌍을`Dictionary` 컬렉션에 담는 축약 형태를 가리킵니다.

키/밸류 쌍은 키와 밸류의 조합입니다. 딕셔너리 표현식에서 각각의 키/밸류 쌍 안에서 키와 밸류는 콜론으로 나뉩니다. 키/밸류 쌍은 리스트로서, 콤마로 나뉘고 대괄호로 감싸집니다:

```swift
[ key 1 : value 1 , key 2 : value 2 , key 3 : value 3 ]
```

아래 예제는 국제공항들의 이름들을 저장하는 딕셔너리를 생성합니다. 이 딕셔너리에서 키 값은 국제공항 코드 (IATA 코드)를 나타내는 세 글자 코드이며 밸류는 공항의 이름입니다:

```swift
var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
```

`airports` 딕셔너리는 `[String: String]`의 타입을 갖게 선언되었습니다. 이것은 "`Dictionary` 타입으로서 `String` 타입의 키, `String` 타입의 밸류를 갖는다"는 것을 의미합니다.

> NOTE
> `airports` 딕셔너리는 `let` introducer를 이용한 상수형 대신 `var` introducer를 이용하여 변수로 정의하였습니다. 이는 아래 예제들에서 이 딕셔너리에 계속해서 공항들을 추가할 것이기 때문입니다.

`airports` 딕셔너리는 두 개의 키/밸류 쌍을 포함하는 딕셔너리 표현식을 통해 초기화하였습니다. 첫 번째 쌍은 `"YYZ"` 라는 키에 `"Toronto Pearson"`라는 밸류를 갖습니다. 두 번째 쌍은 "`DUB`" 라는 키에 "`Dublin`" 이라는 밸류를 갖습니다.

이 딕셔너리 표현식은 두 개의 `String: String` 쌍을 포함합니다. 이것은 `airports` 타입의 정의인 `String` 타입의 키와 `String` 타입의 밸류를 갖는 딕셔너리와 일치합니다. 따라서 딕셔너리 표현식을 이용해서 `airpots` 딕셔너리 변수를 두개의 초기값으로 초기화 시킬 수 있습니다.

배열과 같이 딕셔너리 표현식의 키/밸류 쌍이 갖는 타입이 일정하다면 딕셔너리 타입을 정의할 필요가 없습니다. `aiports`의 초기화는 아래와 같은 축약 형태로 표현할 수 있습니다:

```swift
var airports = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
```

딕셔너리 표현식 안의 모든 키 값의 타입이 서로 같고, 마찬가지로 모든 밸류 타입이 서로 같기 때문에, 스위프트는 `[String: String]` 타입이 `airports` 딕셔너리에 적용 가능하다고 추론할 수 있습니다.

### Accessing and Modifying a Dictionary

딕셔너리는 메소드와 프로퍼티를 통해 접근 및 수정합니다. 혹은 subscript 문법을 사용합니다.

배열과 같이 딕셔너리 안에 값이 몇 개나 있는지를 확인하기 위해 읽기 전용 속성인 `count` 프로퍼티를 사용합니다: 

```swift
print("The airports dictionary contains \(airports.count) items.")
// Prints "The airports dictionary contains 2 items."
```

`count`가 `0`인 경우를 체크하는 축약형으로, Boolean `isEmpty` 속성을 사용하세요.

```swift
if airports.isEmpty {
    print("The airports dictionary is empty.")
} else {
    print("The airports dictionary is not empty.")
}
// Prints "The airports dictionary is not empty."
```

딕셔너리에 새 아이템을 추가하기 위해 subscript 문법을 사용할 수 있습니다. 같은 타입의 새 키를 subscript 인덱스로 사용하여 같은 타입의 새로운 밸류를 할당합니다:

```swift
airports["LHR"] = "London"
// the airports dictionary now contains 3 items
```

Subscript 문법을 사용하여 특정 키에 물려 있는 값을 변경할 수 있습니다:

```swift
airports["LHR"] = "London Heathrow"
// the value for "LHR" has been changed to "London Heathrow"
```

또다른 subscripting 방법으로써, 딕셔너리의 `updateValue(_:forKey:)` 메소드를 사용하여 특정 키에 해당하는 값을 설정하거나 변경할 수 있습니다. 위의 Subscript 예제와 같이 `updateValue(_:forKey:)` 메소드는 만약 키가 존재하지 않을 경우에는 값을 새로 설정하거나 키가 이미 존재한다면 기존의 값을 수정합니다. 하지만 subscript와는 달리 `updateValue(_:forKey:)` 메소드는 업데이트를 하고난 뒤 이전 값을 반환합니다. 이렇게 함으로써 실제로 업데이트 여부를 확인할 수 있습니다.

`updateValue(_:forKey:)` 메소드는 딕셔너리의 밸류 타입에 해당하는 `Optional` 값을 반환합니다. 예를 들어 어떤 딕셔너리가 `String` 밸류를 저장한다면 이 메소드는 `String?` 타입 또는 "Optional `String`" 타입의 밸류를 반환합니다. 이 Optional 밸류는 만약 키가 이미 있었다면 수정하기 이전 밸류를, 아니라면 `nil`을 갖습니다:

```swift
if let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") {
    print("The old value for DUB was \(oldValue).")
}
// Prints "The old value for DUB was Dublin."
```

Subscript 문법을 이용하면 특정 키 값에 대응하는 밸류를 딕셔너리에서 찾을 수 있습니다. 값이 존재하지 않는 키를 요청할 수 있기 때문에 딕셔너리는 딕셔너리의 밸류 타입에 해당하는 Optional 밸류를 반환합니다. 만약 딕셔너리가 요청한 키에 대응하는 밸류를 갖고 있다면, Subscript 는 그 키에 대응하는 밸류를 Optional 밸류를 반환합니다. 아니라면 Subscript는 `nil`을 반환합니다:

```swift
if let airportName = airports["DUB"] {
    print("The name of the airport is \(airportName).")
} else {
    print("That airport is not in the airports dictionary.")
}
// Prints "The name of the airport is Dublin Airport."
```

Subscript 문법을 이용해 `nil` 값을 특정 키에 할당하는 것으로 딕셔너리에서 키/밸류 쌍을 삭제할 수 있습니다:

```swift
airports["APL"] = "Apple International"
// "Apple International" is not the real airport for APL, so delete it
airports["APL"] = nil
// APL has now been removed from the dictionary
```

또는 키/밸류 쌍을 딕셔너리에서 삭제할 때 `removeValueForKey(_:)` 메소드를 이용할 수 있습니다. 이 메소드는 키/밸류 쌍을 삭제하고 삭제된 값을 반환하거나 값이 없다면 `nil`을 반환합니다:

```swift
if let removedValue = airports.removeValueForKey("DUB") {
    print("The removed airport's name is \(removedValue).")
} else {
    print("The airports dictionary does not contain a value for DUB.")
}
// Prints "The removed airport's name is Dublin Airport."
```

### Iterating Over a Dictionary

`for-in` 반복문을 사용하면 딕셔너리 안의 모든 키/밸류 쌍에 접근할 수 있습니다. 딕셔너리 각각의 아이템은 `(key, value)` 튜플을 반환하고, 반복문을 돌리는 도중 이 튜플의 멤버들을 분리하여 임시 상수 혹은 변수에 할당하여 사용할 수 있습니다:

```swift
for (airportCode, airportName) in airports {
    print("\(airportCode): \(airportName)")
}
// YYZ: Toronto Pearson
// LHR: London Heathrow
```

`for-in` 반복문에 대한 자세한 내용은 [For 반복문]() 섹션을 참고하세요.

또한 딕셔너리의 `keys`, `values` 프로퍼티를 이용하면 키 또는 밸류 컬렉션을 반복문으로 돌릴 수 있습니다:

```swift
for airportCode in airports.keys {
    print("Airport code: \(airportCode)")
}
// Airport code: YYZ
// Airport code: LHR
 
for airportName in airports.values {
    print("Airport name: \(airportName)")
}
// Airport name: Toronto Pearson
// Airport name: London Heathrow
```

만약 딕셔너리의 키 콜렉션, 밸류 콜렉션을 `Array` 인스턴스를 이용하고 싶다면, 딕셔너리의 `keys`, `values` 프로퍼티를 배열로 초기화하여 사용할 수 있습니다:

```swift
let airportCodes = [String](airports.keys)
// airportCodes is ["YYZ", "LHR"]
 
let airportNames = [String](airports.values)
// airportNames is ["Toronto Pearson", "London Heathrow"]
```

스위프트의 `Dictionary` 타입은 순서를 정하지 않는 컬렉션입니다. 특정한 순서로 딕셔너리의 키 혹은 밸류에 대해 반복하기 위해서는 `keys`나 `values` 속성에 대해 `sort()` 메소드를 사용합니다.