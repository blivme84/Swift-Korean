# 17 해제 (Deinitialization)
> Translator : 물좀 (메일주소)

deinitializer는 임의의 class 인스턴스가 할당해제(deallocate) 되기 직전에 호출됩니다. initializer를 `init` 키워드로 기술했던 것처럼, deinitializer는 `deinit` 키워드로 작성합니다. deinitializer는 class 타입 인스턴스에서만 사용할 수 있습니다.

## Deinitialization (해제)의 원리

Swift는 자원을 풀어주기 위해, 더 이상 필요하지 않을 때 당신의 인스턴스를 자동적으로 할당해제합니다. Swift는 [Automatic Reference Counting]()에 기술된 바와 같이 인스턴스의 메모리 관리를 ARC(*automatic reference counting*)를 통해 합니다. 일반적으로 대부분의 경우 사용자가 직접 할당해제 할 필요가 없습니다. 하지만, 사용자의 인스턴스에서 직접 리소스를 할당하여 사용했다면, 해제할 때도 직접 해제해 주어야 합니다. 가령, 사용자의 인스턴스에서 파일을 열어서 사용했다면, 해제할 때, 직접 파일을 닫아주어야 합니다. 

class마다 오직 한 개의 deinitializer만을 사용할 수 있으며, 파라미터 없이 정의합니다. 

```swift
deinit {
    // perform the deinitialization
}
```
deinitializer는 할당해제가 일어나기 직전에 자동으로 호출됩니다. 사용자는 직접 호출하지 못합니다. 자식 클래스는 부모 클래스의 deinitializer를 상속받기 때문에, 자식 클래스의 deinitializer가 호출되어 작업을 마친 후, 부모 클래스의 deinitializer가 자동으로 호출됩니다. 부모 클래스의 deinitializer는 자식 클래스의 deinitializer가 정의되지 않았더라도 항상 호출됩니다. 

deinitializer가 호출되기 전까지는 인스턴스의 할당해제가 되지 않았기 때문에, deinitializer는 호출된 인스턴스의 모든 프로퍼티에 접근할 수 있고, 그들의 프로퍼티에 기반해서 행동을 수정할 수 있습니다. (닫아야 할 파일의 이름을 찾아보는 것과 같은)

## Deinitializer 사용 예

deinitializer를 사용하는 예를 살펴봅시다. 이 예제는 간단한 게임을 위해, `Bank`와 `Player`라는 두 개의 데이터 타입을 정의합니다. `Bank`는 화폐를 만드는데, 최대 10,000개의 동전을 유통할 수 있습니다. 게임에서는 오직 한 개의 `Bank`만 있다고 가정하고, 그래서 `Bank`는 저장하고 현재 상태를 관리하기 위한 타입 프로퍼티와 메서드로 클래스로서 구현되어 있습니다.
```swift
class Bank {
    static var coinsInBank = 10_000
    static func vendCoins(numberOfCoinsRequested: Int) -> Int {
        let numberOfCoinsToVend = min(numberOfCoinsRequested, coinsInBank)
        coinsInBank -= numberOfCoinsToVend
        return numberOfCoinsToVend
    }
    static func receiveCoins(coins: Int) {
        coinsInBank += coins
    }
}
```
`Bank`클래스는 `coinsInBank` 속성으로 현재 가지고 있는 동전 수를 추적합니다. 동전의 분배와 수집을 다루기 위해 두 개의 메서드, `vendCoins(_:)`과 `receiveCoins(_:)`를 제공합니다.

`vendCoins(_:)` 메서드는 그것들을 분배하기 전에 은행에 충분한 동전이 남아 있는지 확인합니다. 만약 충분하지 않은 동전이 있다면, `Bank`는 요청된 것보다 더 작은 수의 동전을 돌려줍니다. (그리고 은행에 동전이 없다면, 0을 리턴합니다.)

`receiveCoins(_:)` 메서드는 단순히 받은 동전을 은행의 동전 저장소에 더합니다.

`Player` 클래스는 게임의 플레이어를 설명합니다. 각각의 플레이어는 그들의 주머니 안에 특정 개수의 코인을 가지고 있습니다. 이것은 플레이어의 `coinsInPurse` 속성으로 대표됩니다.

```swift
class Player {
    var coinsInPurse: Int
    init(coins: Int) {
        coinsInPurse = Bank.vendCoins(coins)
    }
    func winCoins(coins: Int) {
        coinsInPurse += Bank.vendCoins(coins)
    }
    deinit {
        Bank.receiveCoins(coinsInPurse)
    }
}
```
`Player` 인스턴스는 은행으로부터 동전을 받으면서 초기화됩니다. 경우에 따라 은행에 충분한 코인이 남아 있지 않다면 요청한 만큼의 동전보다 적게 받을 수도 있습니다.

`Player` 클래스는 은행에서 동전을 받아서, 플레이어의 지갑에 더하는 `winCoins(_:)` 메서드를 정의합니다. `Player` 클래스에는 deinitializer가 정의되어 있는데, 앞서 설명한 바 처럼 `Player` 인스턴스가 할당해제되기 직전에 호출됩니다. 여기서는 단순히 플레이어가 가진 모든 동전을 다시 은행으로 되돌려 보냅니다.

```swift
var playerOne: Player? = Player(coins: 100)
print("A new player has joined the game with \(playerOne!.coinsInPurse) coins")
// Prints "A new player has joined the game with 100 coins"
print("There are now \(Bank.coinsInBank) coins left in the bank")
// Prints "There are now 9900 coins left in the bank"
```
`Player` 인스턴스를 만들 때, 은행에 만약 가능하다면 100 코인을 요청합니다. 이 `Player` 인스턴스는 optional `Player`변수 `playerOne`에 저장됩니다. 여기서 optional 변수가 사용된 이유는 게임 플레이어들이 수시로 게임에서 나갈 수 있기 때문입니다. optional을 사용함으로써 그 인스턴스가 현재 게임에 있는지 아닌지를 추적할 수 있습니다.

`playerOne`이 optional이기에, `winCoins(_:)` 메서드가 호출될 때마다 그리고 `coinsInPurse` 프로퍼티에 기본 수의 동전을 출력할 때에 느낌표(`!`)연산자로 자격이 주어집니다.

```swift
playerOne!.winCoins(2_000)
print("PlayerOne won 2000 coins & now has \(playerOne!.coinsInPurse) coins")
// Prints "PlayerOne won 2000 coins & now has 2100 coins"
print("The bank now only has \(Bank.coinsInBank) coins left")
// Prints "The bank now only has 7900 coins left"
```
여기에서, 플레이어는 2,000 코인을 가지고 있습니다. 플레이어의 지갑은 이제 2,100 코인을 가지고 있고, 은행은 7,900의 동전이 남아 있습니다.

```swift
playerOne = nil
print("PlayerOne has left the game")
// Prints "PlayerOne has left the game"
print("The bank now has \(Bank.coinsInBank) coins")
// Prints "The bank now has 10000 coins"
```
플레이어가 게임을 떠났습니다. 이것은 `playerOne` 변수를 "`Player` 인스턴스가 없다"는 의미의 `nil`로 세팅함으로서 가리킵니다. 이것이 발생하는 시점에서, `Player` 인스턴스를 참조하는 `playerOne` 변수는 깨졌습니다. `Player` 인스턴스에 참조되는 다른 속성이나 변수는 없습니다. 그래서 메모리를 풀어주기 위해 할당해제 합니다. 이것이 일어나기 직전에, denitializer가 자동적으로 호출되고, 은행으로 동전이 리턴됩니다.