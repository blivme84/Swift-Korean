# 15 상속 (Inheritance)
> Translator : YoonJeong Kwon (hoppingbonny@naver.com)

하나의 클래스는 또다른 클래스로부터 메서드, 프로퍼티, 이 외에 다른 특징들을 상속받을 수 있습니다. 어떤 클래스가 다른 클래스로부터 상속받을 때, 상속받는 클래스를 _**하위클래스(subclass)**_라 하고 하위클래스가 상속하는 클래스를 _**상위클래스(superclass)**_라 합니다. Swift에서 상속이란, 다른 타입의 클래스들과 차별화하는 기본적인 방법이다. 

Swift에서 모든 클래스는 상위클래스에 속한 메서드, 프로퍼티, 서브스크립트들을 호출하고 접근할 수 있고, 해당 메서드, 프로퍼티, 서브스크립트들을 오버라이딩하여 자신의 행동을 재정의하거나 수정할 수도 있습니다. Swift는 오버라이드 정의가 상위클래스의 정의와 일치하는 지를 확인하여 오버라이드가 정확히 이뤄졌음을 보장해주기도 합니다.

또한 클래스에는 프로퍼티 값의 변화를 감지하기 위한 프로퍼티 관찰자(property observers)를 상속한 프로퍼티에 추가할 수도 있습니다. 프로퍼티 관찰자는 해당 프로퍼티가 stored 혹은 computed 인지에 관계없이 어떤 프로퍼티에도 추가할 수 있습니다.

## 베이스 클래스 정의
**_베이스 클래스(Base Class)_**란, 어떤 클래스도 상속받지 않은 클래스를 말한다.

> NOTE
> Swift 클래스들은 보편적인 베이스 클래스를 상속받지 않습니다. 당신이 정의한 클래스가 상위클래스를 가지지 않는다면, 자동적으로 베이스 클래스가 됩니다.

아래 예제는 `Vehicle` 베이스 클래스를 정의한 것입니다. 이 베이스 클래스는 기본값이 `0.0` (속성을 `Double` 타입으로 추론합니다)인 `currentSpeed`라는 저장 속성을 정의합니다. 이 `currentSpeed` 속성값은 읽기 전용으로 계산된 차량의 설명을 만들기 위해 `description`을 호출함으로서 `String` 속성에  의해 사용됩니다.

`Vehicle` 베이스 클래스는 또한 `makeNoise`라 불리는 메서드를 정의합니다. 이 메서드는 기반 `Vehicle` 인스턴스에 아무것도 하지 않지만, 나중에 `Vehicle`의 서브클래스에서 커스터마이즈 될 것입니다.

```swift
class Vehicle {
    var currentSpeed = 0.0
    var description: String {
        return "traveling at \(currentSpeed) miles per hour"
    }
    func makeNoise() {
        // do nothing - an arbitrary vehicle doesn't necessarily make a noise
    }
}
```
`Vehicle` 클래스는 임의의 차량에 대해 공통적인 특징들을 정의하지만, 그 자체로 충분하지는 않습니다. 좀 더 유용한 클래스로 만들기 위해, 더 구체적인 차량의 종류를 표현해서 정련할 필요가 있습니다.

## 하위클래스 정의(Subclassing)

**_하위클래스를 정의(subclassing)_**은 기존 클래스에 기반을 둔 새로운 클래스를 생성하는 것입니다. 하위클래스는 기존 클래스의 모든 특징을 상속받고, 그것들을 정련할 수 있습니다. 또한 새로운 특징들을 하위클래스에 추가할 수 있습니다.

어떤 클래스가 상위클래스를 갖는다는 것을 나타내려면 본 클래스명 뒤에 콜론(:)과 상위클래스명을 차례로 적습니다.
```swift
class SomeSubclass: SomeSuperclass {
    // subclass definition goes here
}
```
이어지는 예제는 `Vehicle`의 상위클래스로, `Bicycle`라 불리는 하위클래스를 정의한 것입니다.

```swift
class Bicycle: Vehicle {
    var hasBasket = false
}
```
새로운 `Bicycle` 클래스는 자동적으로 `Vehicle`의 모든 특징들, `currentSpeed`와 `description`와 같은 프로퍼티, 그리고 `makeNoise()` 메소드와 같은 것들을 획득합니다.

그 상속에 특징을 더하기 위해, `Bicycle` 클래스는 새로운 저장 속성인 `hasBasket`을 기본값 `false`로 정의합니다. (속성의 타입은 `Bool`로 추론됩니다.)

```swift
let bicycle = Bicycle()
bicycle.hasBasket = true
```

또한 상속 받은 `Bicycle`인스턴스의 `currentSpeed` 속성을 수정할 수 있습니다. 그리고 인스턴스의 상속된 `description` 속성을 질의할 수 있습니다.

```swift
bicycle.currentSpeed = 15.0
print("Bicycle: \(bicycle.description)")
// Bicycle: traveling at 15.0 miles per hour
```

하위클래스는 그들 스스로 하위클래스가 될 수 있습니다. 다음 예제는 "2인용 자전거"(tandem)라 불리는 두 개의 좌석이 있는 `Bicycle`의 하위클래스를 만드는 예제입니다.

```swift
class Tandem: Bicycle {
    var currentNumberOfPassengers = 0
}
```

`Tandem`은 `Bicycle`의 모든 속성과 메서드를 상속합니다. 그리고 `Vehicle`로부터 모든 속성과 메서드를 모두 상속 받습니다. `Tandem` 하위 클래스는 또한 `currentNumberOfPassengers`라 불리는 기본값이 `0`인 새로운 저장 속성을 추가합니다.

만약 `Tandem`의 인스턴스를 만든다면, 당신은 그것의 새로운 속성과 상속받은 속성 모두로 작업할 수 있습니다. 그리고 `Vehicle`로부터 상속받은 읽기 전용 `description` 속성에 대해 질의할 수 있습니다.

```swift
let tandem = Tandem()
tandem.hasBasket = true
tandem.currentNumberOfPassengers = 2
tandem.currentSpeed = 22.0
print("Tandem: \(tandem.description)")
// Tandem: traveling at 22.0 miles per hour
```

## 오버라이딩(Overriding)

하위클래스는 인스턴스 메서드, 클래스 메서드, 인스턴스 속성, 타입 속성 혹은 서브스크립트에 대해 자신만의 커스텀 구현체를 제공할 수 있습니다. 그렇지 않았다면 상위클래스의 것들을 상속받을 것입니다. 이를 **_오버라이딩(Overriding)_**이라 합니다.

상속한 특징을 오버라이드하려면 오버라이딩한다는 의미로 `override` 키워드를 접두사로 붙입니다. 그렇게 하는 것은 의도적으로 오버라이드를 했고 실수로 일치하는 않는 정의를 한 것이 아님을 분명히 합니다. 우연히도 오버라이딩은 예기치 못한 행동을 일으킬 수도 있고, `override` 키워드가 없는 어떤 오버라이드는 코드가 컴파일될 때 에러로 인식될 수 있습니다.

또한 `override` 키워드는 Swift 컴파일러에게 오버라이딩 클래스의 상위클래스(혹은 부모 클래스 중 하나)가 당신이 오버라이드한 것과 일치하는 선언을 갖고 있는지 확인하도록 즉각적인 명령을 내립니다. 이러한 확인은 오버라이딩 정의가 올바르게 되었음을 확실하게 만듭니다.
### 상위클래스의 메서드, 프로퍼티, 서브스크립트에 접근하기(Accessing Superclass Methods, Properties, and Subscripts) 

메서드, 속성 혹은 서브스크립트를 오버라이드해서 하위클래스를 만들 때 오버라이드의 일부분으로서 기존 상위클래스의 구현을 활용하는 것이 유용할 때가 있습니다. 예를 들어, 당신은 기존에 존재하던 구현의 행동을 정련하거나, 존재하는 상속된 변수에 수정된 값을 저장할 수 있습니다.

적절한 위치에서 `super` 접두사를 붙여, 상위클래스의 메서드, 속성 또는 서브스크립트에 접근할 수 있습니다.

- `someMethod()`가 오버라이드 되었을 때, 오버라이딩 메서드 내부에서 `super.someMethod()`를 통해 상위클래스의 `someMethod()` 메서드를 호출할 수 있습니다. 
- `someProperty`가 오버라이드 되었을 때, 오버라이딩한 접근자(getter)와 설정자(setter) 내부에서 `super.someProperty`를 통해 상위클래스의 `someProperty`를 호출할 수 있습니다.
- `someIndex`에 해당하는 서브스크립트가 오버라이드 되었을 때, 오버라이딩한 서브스크립트 내부에서 `super[someIndex]`를 통해 상위클래스의 동일한 서브스크립트를 호출할 수 있습니다.

### 메서드 오버라이딩(Overriding Methods)

하위클래스에서 특정한 목적에 맞는 메서드를 제공하거나 해당 메서드를 대체하기 위해, 상속한 인스턴스나 클래스 메서드를 오버라이드 할 수 있습니다.

다음 예제는 `Vehicle`의 새로운 하위클래스인 `Train`를 정의하였고, 이 클래스는 `Vehicle`로부터 `makeNoise()`를 상속받아 오버라이드합니다.
```swift
class Train: Vehicle {
    override func makeNoise() {
        print("Choo Choo")
    }
}
```
만약, `Train`의 새로운 인스턴스를 만들고, `makeNoise()` 메서드로 호출한다면, 당신은 메서드의 `Train` 하위 클래스 버전이 호출되는 것을 볼 수 있습니다.

```swift
let train = Train()
train.makeNoise()
// Prints "Choo Choo"
```

### 프로퍼티 오버라이딩(Overriding Properties)

당신만의 커스텀 getter나 setter를 그 속성에 대해 제공하기 위해, 혹은 오버라이딩 프로퍼티를 프로퍼티 값 변화를 관찰 가능하게 하기 위한 관찰자를 추가하기 위해, 상속된 인스턴스나 타입 프로퍼티를 오버라이드 할 수 있습니다.

#### 프로퍼티 접근자와 설정자 오버라이딩(Overriding Property Getters and Setters)

당신은 어떤 상속된 프로퍼티(그것이 소스에서 계산된 프로퍼티로 구현되었건, 저장 프로퍼티로 그현되었건 관계없이)라도 오버라이드 하기 위해 커스텀 getter(만약 적절하다면, setter과 함께)를 제공할 수 있습니다. 상속된 프로퍼티의 저장(stored) 혹은 계산된(computed) 성질은 하위클래스는 알지 못하고, 상속한 프로퍼티의 이름과 타입만 압니다. 항상 오버라이딩 하려는 프로퍼티의 이름과 타입을 동일하게 유지해야 합니다. 그래야 컴파일러가 오버라이드한 것과 상위클래스의 프로퍼티의 이름과 타입이 일치하는지를 체크할 수 있습니다.

당신의 하위클래스 프로퍼티 오버라이드에서, 상속된 읽기 전용 프로퍼티를 getter과 setter 모두를 제공함으로서 읽고 쓰기가 가능한 프로퍼티로 나타낼 수 있습니다. 그러나 읽고 쓰기가 가능한 상속 프로퍼티를 읽기만 가능한 프로퍼티로 나타낼 수는 없습니다.	

> NOTE
> 프로퍼티 오버라이드 중 setter를 제공한다면, getter도 반드시 제공해야 합니다. 만약 오버라이드 한 getter에서 상속된 프로퍼티의 값을 바꾸지 않기를 원한다면, 당신이 오버라이드 한 프로퍼티의 이름이 `someProperty`인 곳에서 상속된 값을 단지 `super.someProperty`를 리턴함으로서, 값을 통과시키면 됩니다.

다음 예제는 `Vehicle`의 하위클래스인 새로운 `Car`를 정의한 것입니다. `Car` 클래스는 새로운 저장 프로퍼티인 기본값이 1인 `gear`를 가지고 있습니다. `Car` 클래스는 또한 현재 기어를 포함한 커스텀 설명을 제공하기 위해 `Vehicle`로부터 상속된 `description` 속성을 오버라이드 합니다. 

```swift
class Car: Vehicle {
    var gear = 1
    override var description: String {
        return super.description + " in gear \(gear)"
    }
}
```
만약 `description` 프로퍼티의 오버라이드는 `Vehicle` 클래스의 `description` 속성을 리턴하는 `super.description`을 호출하는 것에서 시작합니다. `Car` 클래스의 `description` 버전은 현재 기어에 대한 정보를 제공하기 위해 설명의 마지막에 약간의 글을 추가합니다.

만약 `Car` 클래스의 인스턴스를 만들고, `gear`와 `currentSpeed` 프로퍼티를 설정한다면, 당신은 `Car` 클래스 안에서 정의된 조정된 설명을 리턴하는 `description` 속성을 볼 수 있습니다.

```swift
let car = Car()
car.currentSpeed = 25.0
car.gear = 3
print("Car: \(car.description)")
// Car: traveling at 25.0 miles per hour in gear 3
```

#### 프로퍼티 관찰자 오버라이딩(Overriding Property Observers)

프로퍼티 관찰자를 상속한 프로퍼티에 추가하려면, 프로퍼티 오버라이딩을 사용합니다. 이것은 프로퍼티가 어떻게 구현되었는지에 관계없이 상속한 프로퍼티 값의 변화를 알아차릴 수 있도록 해줍니다. 프로퍼티 관찰자에 대한 더 많은 정보를 보려면, [Property Observers]()를 참고하세요.

> NOTE
> 프로퍼티 관찰자는 상수 저장 프로퍼티 혹은 읽기 전용 계산 프로퍼티에 추가될 수 없습니다. 이들 프로퍼티 값은 다시 설정될 수 없어서, 오버라이드의 일부로 `willSet` 혹은 `didSet`을 제공하는 것은 적절하지 않습니다.
> 또한 오버라이딩 setter와 오버라이딩 프로퍼티 관찰자를 같은 프로퍼티 내에서 동시에 제공할 수 없습니다. 프로퍼티 값이 변경되는 것을 관찰하고 싶고, 이미 그 프로퍼티를 위한 커스텀 setter를 제공하고 있다면, 커스텀 setter 안에서 값의 변화를 간단하게 관찰할 수 있습니다.

다음 예제는 `Car`의 하위클래스인 `AutomaticCar`라 불리는 새로운 클래스를 정의한 것입니다. `AutomaticCar` 클래스는 자동 기어박스를 가진 차를 나타내고, 자동 기어박스는 현재 속도에 따라 자동적으로 적절한 기어를 선택합니다.
```swift
class AutomaticCar: Car {
    override var currentSpeed: Double {
        didSet {
            gear = Int(currentSpeed / 10.0) + 1
        }
    }
}
```
`AutomaticCar` 인스턴스의 `currentSpeed` 프로퍼티를 설정할 때마다, 프로퍼티의 `didSet` 관찰자는 새로운 속도 값에 따라 자동적으로 `gear` 프로퍼티에 적절한 기어값을 할당합니다. 이 관찰자는 새로운 `currentSpeed` 값을 `10`으로 나눈 후 반올림한 정수에 1을 더해 기어값을 결정합니다. speed가 `35.0`이면 gear에 `4`가 할당됩니다.

```swift
let automatic = AutomaticCar()
automatic.currentSpeed = 35.0
print("AutomaticCar: \(automatic.description)")
// AutomaticCar: traveling at 35.0 miles per hour in gear 4
```
## 오버라이드 방지(Preventing Overrides)

메서드, 프로퍼티, 서브스크립트를 오버라이딩하지 못하도록 하려면, _final_로 표시하면 됩니다. 이것을 위해 `final` 속성을 첫 키워드 앞에 표시합니다. (예, `final var`, `final func`, `final class func`, `final subscript`)

하위클래스 내에 final 메서드, 프로퍼티, 서브스크립트를 오버라이드하면 컴파일 에러를 발생합니다. 확장 클래스 안에 추가한 메서드, 프로퍼티, 서브스크립트도 final로 표시될 수 있습니다.

전체 클래스를 final로 만들려면 `class` 키워드 앞에 `final`을 표시(`final class`)하면 됩니다. 하위클래스를 final 클래스로 만들려고 하면, 컴파일 에러를 발생할 것입니다.
