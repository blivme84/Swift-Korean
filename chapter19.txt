# 19 옵셔널 체인 (Optional Chaining)
> Translator : 허혁 (hyukhur@gmail.com)

옵셔널 체인(Optional chaining)은 `nil`이 될 수도 있는 옵션(options)을 가진 프로퍼티(property), 메소드(method), 서브 스크립트 (subscript)에 질의하고 호출하는 프로세스입니다.  만약 어떤 옵션이 값을 가진다면 프로퍼티, 메소드, 서브스크립트 호출은 성공하고 옵션이 `nil`이면, 프로퍼티, 메소드, 서브스크립트 호출은 `nil`을 반환합니다. 여러 개의 질의도 함께 엮일 수 있으며, 만약 체인(chaining) 중간의 어떤 링크가 `nil`이라면 조용하게 전체 체인은 실패합니다. 

>NOTE
>스위프트(Swift)의 옵셔널 체인이 오브젝티브씨(Objective-C)에 있는 `nil`에 메시지 보내기와 유사합니다. 그러나, 모든 타입(any type)에서 동작하고, 성공, 실패 여부를 확인할 수 있다는 점에서 차이가 있습니다.

## 강제 랩핑 해제(Forced Unwrapping) 대안으로써 옵셔널 체인
호출하고자 하는 프로퍼티, 메소드, 서브스크립트의 옵셔널 값(optional value)이 `nil` 아닐 때 옵션값 뒤에 물음표(`?`)를 두어 옵셔널 체인을 명시 할 수 있습니다. 이것은 옵션널 값 뒤에 느낌표(`!`)를 두어 그 값을 강제로 랩핑 해제하는 것과 유사합니다. 가장 주요한 차이점은 옵셔널 체인은 옵션이 `nil`일 때 자연스럽게 실패한다는 것이고, 강제 랩핑 해제는 옵션이 `nil`인 경우 런타임 에러가 발생합니다.
옵셔널 체인이 `nil` 값에도 호출할 수 있다는 사실을 반영하기 위해, 옵셔널 체인 호출 결과는 항상 옵셔널 값입니다. 비록 질의한 프로퍼티, 메소드, 서브스크립트가 항상 옵셔널 값이 아닌 결과를 도출해도 그렇습니다. 이 옵셔널 반환 값을 사용해서 옵셔널 체인 호출이 성공했는지 (반환된 옵션이 값을 가지는) 체인 중간의 `nil` 값 (옵션 반환값이 `nil`) 때문에 실패했는지를  확인할 수 있습니다.
구체적으로, 옵셔널 체인 호출 결과는 기대한 반환값과 동일한 타입이나, 옵션으로 감싸여 있습니다. 일반적으로 `Int`를 반환하는 프로퍼티는 옵셔널 체인에 따라 접근이 가능할 때는 `Int?`를 반환할 것입니다. 
다음 몇몇 코드 조각은 옵셔널 체인이 어떻게 강제 랩핑 해제와 다르고 성공 여부 확인을 가능케 하는지 보여줍니다.
먼저 `Person`과 `Residence`라는 클래스를 정의합니다.
```swift
class Person {
    var residence: Residence?
}
 
class Residence {
    var numberOfRooms = 1
}
```
`Residence`인스턴스는 기본값이 `1`인 `numberOfRooms`이라는 단 하나의 `Int` 프로퍼티를 가집니다. `Person`인스턴스는 `Residence?` 타입으로 `residence`이라는 옵셔널 프로퍼티를 가집니다.
만약 `Person`이라는 인스턴스를 새로 만들면, `residence` 프로퍼티는 옵셔널 효과에 따라 기본적으로 `nil`이 할당됩니다. 아래 코드에서는 `john`는 `nil`로 된 `residence` 프로퍼티를 가집니다.
```swift
let jone = Person()
```
만약 `Person`의 `residence`의 `numberOfRooms`프로퍼티를 그 값을 강제로 랩핑 해제를 하려고 느낌표를 붙여서 접근한다면 런타임 에러를 발생할 것입니다. 해제할 `residence`값 자체가 없기 때문입니다.
```swift
let roomCount = john.residence!.numberOfRooms
// this triggers a runtime error
```
위 코드는 `john.residence`가 `nil`이 아닌 값을 성공하며, 방 갯수에 적절한 숫자를 담고 있는 `Int` 값에 `roomCount`를 설정할 것입니다. 그러나 이 코드는 위에 보여지는 것처럼 `residence`가 `nil`이라면 항상 런타임 에러를 발생합니다.
옵셔널 체인은 `numberOfRooms`값에 접근하는데 대안법을 제공합니다. 옵셔널 체인을 사용하기 위해 느낌표 자리에 물음표를 사용하면 됩니다.
```swift
if let roomCount = john.residence?.numberOfRooms {
    print("John's residence has \(roomCount) room(s).")
} else {
    print("Unable to retrieve the number of rooms.")
}
// Prints "Unable to retrieve the number of rooms."
```
이것은 Swift가 옵셔널 `residence` 프로퍼티를 "묶고" 만약 `residence`가 있으면 `numberOfRooms`값을 가져온다는 것을 말해줍니다.

`numberOfRoom`에 대한 접근이 잠제적으로 실패할 수 있기 때문에, 옵셔널 체인은 `Int?`이나 "옵셔널 `Int`"형 값을 반환하려고 합니다. 위 예제처럼 `residence`가 `nil`인 경우는 `numberOfRooms`에 대한 접근이 불가능하다는 사실을 반영하기 위해서 이 옵셔널 `Int` 역시 `nil`이 될 것입니다.

`numberOfRooms`가 비옵셔널 `Int`임에도 불구하고 참인 것을 주의하세요. 옵셔널 체인을 통해 질의한다는 것은 `numberOfRooms`가 `Int` 대신 `Int?`를 항상 반환할 것임을 의미합니다.
`john.residence`에 `Residence` 인스턴스를 할당할 수 있는데, 그러면 더 이상 `nil`값은 존재하지 않게됩니다.

```swift
john.residence = Residence()
```
`john.residence`는 실체 `Residence`인스턴스를 이제 가집니다. 만약 예전과 동일한 옵셔널 체인을 사용해 접근하려고 하면, `1`이라는 `numberOfRooms`기본값을 가지는 `Int?`가 반환됩니다.
```swift
if let roomCount = john.residence?.numberOfRooms {
    print("John's residence has \(roomCount) room(s).")
} else {
    print("Unable to retrieve the number of rooms.")
}
// Prints "John's residence has 1 room(s)."
```
## 옵셔널 체인을 위한 모델(Model) 클래스(Class) 선언

프로퍼티, 메소드, 서브스크립트를 호출하는 것 같은 한 단계 더 깊은 옵셔널 체인을 사용할 수 있습니다. 이는 상호관계있는 타입간의 복잡한 모델에서 서브프로퍼티(subproperty)를 파고 들 수 있게 해주고 그 서브프로터티에 프로퍼티와 메소드, 서브스크립트에 접근할 수 있는지 아닌지를 확인할 수 있게 해줍니다.
다음 코드 조각은 다단계 옵셔널 체인 예를 포함한 몇 가지 순차적인 예제에서 사용될 4개의 모델 클래스를 정의합니다. 이 클래스들은 위에 나온 `Person`과 `Residence` 모델에 `Room`과 `Address` 클래스를 추가하고 연관 프로퍼티와 메소드, 서브스크립트를 확장합니다.
`Person` 클래스는 이전과 동일한 방법으로 정의합니다.
```swift
class Person {
    var residence: Residence?
}
```
`Residence` 클래스는 이전보다 조금 복잡합니다. 이번에는 `Residence` 클래스에 `[Room]` 타입의 빈 배열로 초기화된 `rooms`라는 변수 프로퍼티를 선언합니다.
```swift
class Residence {
    var rooms = [Room]()
    var numberOfRooms: Int {
        return rooms.count
    }
    subscript(i: Int) -> Room {
        get {
            return rooms[i]
        }
        set {
            rooms[i] = newValue
        }
    }
    func printNumberOfRooms() {
        print("The number of rooms is \(numberOfRooms)")
    }
    var address: Address?
}
```

이번 버전 `Residence`는 `Room`인스턴스 배열을 저장하기 때문에, 그 `numberOfRooms` 프로퍼티는 저장된 프로퍼티가 아닌 계산된 프로퍼티로 구현했습니다. 계산된 `numberOfRooms` 프로퍼티는 단순히 `rooms` 배열에서 `count` 프로퍼티의 값을 반환합니다.
그 `rooms` 배열에 접근하기 위한 바로가기로, 이번 버전 `Residence`는 읽기-쓰기 서브 스크립트를 제공하는데, 이것은 `rooms` 배열 내에서 요구된 인덱스에 있는 방에 대한 접근을 제공합니다.

또한 이번 버전 `Residence`는 `printNumberOfRooms`라는 이름의 메소드를 제공하는데 단순히 `Residence`에 방 갯수를 출력합니다.

마지막으로 `Residence`에 `Address?`이란 타입으로 `address`라는 옵셔널 프로퍼티를 선언합니다. 이를 위한 `Address` 클래스 타입은 밑에서 정의합니다.

`rooms`배열에 사용하는 `Room`클래스는 `name`이라는 프로퍼티 하나를 가지는 간단한 클래스인데 이는 적절한 방이름을 설정하기 위한 초기화 역할(initializer)을 한다.

```swift
class Room {
    let name: String
    init(name: String) { self.name = name }
}
```

이 모델의 마지막 클래스는 `Address`입니다. 이 클래스는 `String?`타입의 옵셔널 프로퍼티를 3개 가지고 있습니다. 그 중 2개는 `buildingName`과 `buildingNumber` 인데 주소를 구성하는 특정 빌딩에 대한 구분을 짓기 위한 대체 수단입니다. 3번째 프로퍼티인 `street`는 그 주소의 도로이름에 사용합니다.
```swift
class Address {
    var buildingName: String?
    var buildingNumber: String?
    var street: String?
    func buildingIdentifier() -> String? {
        if buildingName != nil {
            return buildingName
        } else if buildingNumber != nil && street != nil {
            return "\(buildingNumber) \(street)"
        } else {
            return nil
        }
    }
}
```
또한 `Address`클래스는 `String?`반환값을 가지는 `buildingIdentifer()`이란 이름의 메소드를 제공합니다. 이 메소드는 `buildingName`과 `buildingNumber`프로퍼티를 확인해서 만약 `buildingName`이 값을 가진다면 그 값을 혹은 `buildingNumber`이 값을 가진다면 그 값을, 둘 다 값이 없다면 `nil`을 반환합니다.

## 옵셔널 체인를 통한 프로퍼티 호출
[강제 랩핑 해제(Forced Unwrapping) 대안으로써 옵셔널 체인]()에서 봤던 것처럼 옵셔널 체인을 옵션값에 대한 프로퍼티 접근에 접근하기 위해서, 그리고 프로퍼티 접근이 가능한지 확인하기 위해서 사용할 수 있습니다.

위에 정의한 새로운 `Person` 인스턴스를 사용해 클래스를 만들어 이전처럼 `numberOfRooms` 프로퍼티에 접근하기를 시도해봅시다.

```swift
let john = Person()
if let roomCount = john.residence?.numberOfRooms {
    print("John's residence has \(roomCount) room(s).")
} else {
    print("Unable to retrieve the number of rooms.")
}
// Prints "Unable to retrieve the number of rooms."
```
`john.residence`가 `nil`이기 때문에, 이 옵셔널 체인은 전과 같은 방식으로 실패를 호출합니다.

또한 당신은 옵셔널 체인을 통해 프로퍼티의 값을 세팅하는 것을 시도할 수 있습니다.

```swift
let someAddress = Address()
someAddress.buildingNumber = "29"
someAddress.street = "Acacia Road"
john.residence?.address = someAddress
```

이 예제에서, `john.residence`의 `address` 프로퍼티를 세팅하려고 시도하는 것은  현재 `john.residence`가 `nil`이기에 실패할 것입니다.

이 할당은 `=` 오퍼레이터의 오른쪽에 평가되는 코드가 없다는 것을 의미하는 옵셔널 체인의 부분입니다. 이전 예제에서, `someAddress`가 전혀 평가되지 않는다는 것을 보는 것은 어렵습니다. 왜냐하면, 상수에 접근하는 것은 어떤 부수효과도 가지지 않기 때문입니다. 아래의 리스트는 같은 할당을 하지만, 주소를 만들기 위해 함수를 사용합니다. 이 함수는 값을 돌려주기 전에 "함수가 호출되었다"는 것을 출력합니다. 이것은 당신이 `=` 오퍼레이터 오른 쪽이 평가되었는지를 볼 수 있게 합니다.

```swift
func createAddress() -> Address {
    print("Function was called.")
    
    let someAddress = Address()
    someAddress.buildingNumber = "29"
    someAddress.street = "Acacia Road"
    
    return someAddress
}
john.residence?.address = createAddress()
```

아무것도 출력되지 않기에, `createAddress()` 함수가 호출되지 않았다고 할 수 있습니다.

## 옵셔널 체인을 통한 메소드 호출
옵셔널 체인을 사용해서, 옵션값을 호출하고, 메소드 호출이 성공했는지 여부를 확인해볼 수 있습니다. 설렁 메소드가 반환값을 정의하지 않더라도 할 수 있습니다.
`Residence` 클래스에 있는 `printNumberOfRooms()` 메소드는 `numberOfRooms`의 현재 값을 출력합니다. 그 메소드는 다음과 같습니다.
```swift
func printNumberOfRooms() {
    print("The number of rooms is \(numberOfRooms)")
}
```
이 메소드는 반환값을 명시하지 않았습니다. 그러나 반환형이 없는 함수와 메소드는 [Functions Without Return Values]()에 나와 있는 것처럼 암시적으로 `Void`타입을 반환합니다. 이것은 그들이 `()` 값을 리턴하거나, 비어있는 튜플을 리턴함을 의미합니다.
만약 옵셔널 체인에 있는 옵션값에 이 메소드를 호출한다면, 메소드 반환형은 `Void`가 아니라 `Void?`이 될 것입니다. 옵셔널 체인을 통해 호출될 때 옵셔널 타입은 항상 반환 값을 가지기 때문입니다. 이는 메소드가 반환값이 정의되어 있지 않더라도 `printNumberOfRooms()`메소드를 호출이 가능한지를 `if`문을 써서 확인할 수 있게 합니다. `printNumberOfRooms`에서 암시적 반환값은 만약 메소드가 옵셔널 체인를 통해 성공적으로 호출되었다면 `Void`와 동일할 것이고 그렇지 않다면 `nil`과 동일할 것이다.
```swift
if john.residence?.printNumberOfRooms() != nil {
    print("It was possible to print the number of rooms.")
} else {
    print("It was not possible to print the number of rooms.")
}
// Prints "It was not possible to print the number of rooms."
```

만약 당신이 옵셔널 체인을 통해 프로퍼티를 설정하는 것을 시도한다면, 같은 방식으로 참입니다. [Accessing Properties Through Optional Chaining](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID248)의 위의 예제는 심지어 `residence` 프로퍼티가 `nil`이라 해도, `address` 값을 `john,residence`로 세팅하려 시도합니다. 옵셔널 체인을 통해 프로퍼티를 세팅하는 어떤 시도도 `Void?` 타입의 값을 리턴합니다. 이것은 당신에게 프로퍼티가 성공적으로 세팅되었는지 보게하기 위해 `nil`에 대해서 비교가능하게 합니다.

```swift
if (john.residence?.address = someAddress) != nil {
    print("It was possible to set the address.")
} else {
    print("It was not possible to set the address.")
}
// Prints "It was not possible to set the address."
```

## 옵셔널 체인을 통한 서브스크립트 호출

옵셔널 체인을 사용해서, 검색 및 옵셔널 값에 대한 서브스크립트를 통해 값을 세팅하는 것, 그리고 서크스크립트가 성공적으로 호출되었는지 체크하는 것을 시도할 수 있습니다.

>NOTE
>옵셔널 체인를 통해 옵션값에 대한 서브스크립트를 접근할 때 서브스크립트의 꺽은 괄호(bracket) (뒤가 아닌)앞에 물음표를 놓아야 합니다. 옵셔널 체인 물음표는 항상 옵셔널 표현식의 뒤에 바로 따라나와야 합니다.

아래 예는 `Residence`클래스에 정의되어 있는 서브스크립트를 사용하는 `john.residence` 프로퍼티의 `rooms` 배열에 있는 첫 번째 방이름을 집어오려고 하는 것입니다. `john.residence`가 현재 `nil`이기 때문에 서브스크립트는 실패합니다.
```swift
if let firstRoomName = john.residence?[0].name {
    print("The first room name is \(firstRoomName).")
} else {
    print("Unable to retrieve the first room name.")
}
// Prints "Unable to retrieve the first room name."
```

이 서브스크립트 호출 속에 있는 옵셔널 체인 물음표는 `john.residence`바로 뒤, 서브스크립트 꺽은 괄호 전에 존재해야 합니다. 왜냐하면, `john.residence`가 옵셔널 체인을 시도할 옵션값이기 때문입니다.

유사하게, 당신은 옵셔널 체인으로 서브스크립트를 통해 새로운 값을 세팅하는 것을 시도할 수 있습니다.

```swift
john.residence?[0] = Room(name: "Bathroom")
```

이 서브스크립트 세팅 시도는 또한 실패할 것입니다. 왜냐하면, `residencd`가 현재 `nil`이기 때문입니다.

만약, `john.residence`에 `rooms` 배열에 한 개 이상의 `Room`인스턴스도 같이 실제 `Residence`를 만들어서 할당한다면 옵셔널 체인을 통해 `rooms` 배열 안의 실제 아이템에 접근하기 위해서 `Residence` 서브스크립트를 사용할 수 있습니다. 

```swift
let johnsHouse = Residence()
johnsHouse.rooms.append(Room(name: "Living Room"))
johnsHouse.rooms.append(Room(name: "Kitchen"))
john.residence = johnsHouse
 
if let firstRoomName = john.residence?[0].name {
    print("The first room name is \(firstRoomName).")
} else {
    print("Unable to retrieve the first room name.")
}
// Prints "The first room name is Living Room."
```
### Accessing Subscripts of Optional Type

만약 서브스크립트가 옵셔널 타입의 값을 리턴한다면(Swift의 `Dictionary` 타입의 서브스크립트의 키 같은) 그것의 옵셔널 리턴 타입 값을 체인하기 위해 서브스크립트의 클로징 괄호 뒤에 물음표를 두기 바랍니다.

```swift
var testScores = ["Dave": [86, 82, 84], "Bev": [79, 94, 81]]
testScores["Dave"]?[0] = 91
testScores["Bev"]?[0] += 1
testScores["Brian"]?[0] = 72
// the "Dave" array is now [91, 82, 84] and the "Bev" array is now [80, 94, 81]
```

이 예제는 `testScores`라 불리는 딕셔너리를 정의합니다. 이 딕셔너리는 `String` 키를 `Int` 값으 배열로 매핑하는 두 키-값 페어를 포함합니다. 이 예제는 `"Dave"` 배열 안에 있는 첫 번째 아이템을 `91`로 세팅하기 위해, `"Bev"` 배열의 첫 번째 아이템을 `1` 증가시키기 위해, 그리고 `"Brian"` 키의 첫 번째 아이템을 세팅하려고 시도하기 위해 옵셔널 체인을 사용합니다. 처음 두 호출은 성공합니다. 왜냐하면, `testScores` 딕셔너리가 `"Dave"`와 `"Bev"`에 대해 키를 포함하기 때문입니다. 마지막 세 번째는 실패하는데, `testScores` 딕셔너리가 `"Brian"`에 대해 키를 포함하지 않기 때문입니다.

## 다단계 묶임 연결하기

프로퍼티와 메소드, 서브스크립트를 사용해 모델 깊이 파고들기 위해서 옵셔널 체인을 여러 단계로 함께 엮을 수 있습니다. 그러나 다단계 옵셔널 체인으로 반환값에 더 많은 옵셔널 단계를 넣을 수는 없습니다.

다른 방식으로:

- 만약 집어오려고 하는 타입이 옵셔널이지 않으면, 옵셔널 체인으로 인해 옵셔널로 변경될 것입니다.
- 만약 집어오려고 하는 타입이 이미 옵셔널이라면, 옵셔널 체인으로 인해 더 옵셔널로 변경되지는 않을 것입니다.

그러므로:

- `Int`타입을 옵셔널 체인을 통해 집어오려고 하면, 항상 `Int?`가 반환될 것입니다. 얼마나 많은 단계의 체인이 사용되었는지는 중요하지 않습니다.
- 유사하게, `Int?`값을 집어오려고 하면, 항상 `Int?`가 반환될 것입니다.  얼마나 많은 단계의 체인이 사용되었는지는 중요하지 않습니다.

아래 예는 `john`의 `residence`프로퍼티의 `address`프로퍼티의 `street`프로퍼티에 접근하려는 것을 보여줍니다. 여기에 사용되는 2개의 옵셔널 체인 단계가 있는데 `residence`와 `address`로 둘은 엮여 있고 둘 다 옵셔널타입입니다.
```swift
if let johnsStreet = john.residence?.address?.street {
    print("John's street name is \(johnsStreet).")
} else {
    print("Unable to retrieve the address.")
}
// Prints "Unable to retrieve the address."
```
`john.residence`의 값은 현재 적합한 `Residence`인스턴스를 포함하고 있습니다. 그러나 `john.residence.address`의 값은 현재 `nil`입니다. 이때문에, `john.residence?.address?.street`호출은 실패합니다.

위 예제를 잘 생각해봅시다. 당신은 `street` 프로퍼티 값을 집어오려 했습니다. 이 프로퍼티는 `String?`입니다. 그러므로  `john.residence?.address?.street`의 반환값 역시 두 단계 옵셔널 체인으로 프로퍼티가 옵셔널타입에 추가로 더해 적용되었음에도 불구하고 `String?`입니다.

만약 `john.residence.address`의 값으로써 실제 `Address`인스턴스를 설정하고 그 `Adress`의 `street`프로퍼티에 실제 값을 설정한다면, 다단계 옵셔널 체인을 통해 그 프로퍼티 값을 접근할 수 있습니다.

```swift
let johnsAddress = Address()
johnsAddress.buildingName = "The Larches"
johnsAddress.street = "Laurel Street"
john.residence?.address = johnsAddress
 
if let johnsStreet = john.residence?.address?.street {
    print("John's street name is \(johnsStreet).")
} else {
    print("Unable to retrieve the address.")
}
// Prints "John's street name is Laurel Street."
```
이 예제에서, `john.residence`의 `address` 프로퍼티를 세팅하기 위한 시도는 성공하였습니다. 왜냐하면, `john.residence`의 값은 현재 유효한 `Residence` 인스턴스를 포함하고 있기 때문입니다.

## 옵셔널 반환값을 사용한 메소드 체인
이전 예제는 옵셔널 체인을 사용해서 옵셔널타입의 프로퍼티의 값을 어떻게 집어오는지 보여 주었습니다. 또한 옵셔널 체인을 사용해서 옵셔널타입 값을 반환하는 메소드를 호출하고 필요하다면 그 메소드의 반환값을 연결할 수 있었습니다.
아래 예제는 옵셔널 체인을 통해 `Address` 클래스의 `buildingIndentifer()` 메소드를 호출합니다. 이 메소드는 `String?` 타입의 값을 반환합니다. 이전에 설명한대로, 옵셔널 체인에 따라 호출된 메소드의 최종 반환값 또한 `String?`이 됩니다.
```swift
if let buildingIdentifier = john.residence?.address?.buildingIdentifier() {
    print("John's building identifier is \(buildingIdentifier).")
}
// Prints "John's building identifier is The Larches."
```
만약 이 메소드 반환값 이상의 옵셔널 체인을 실행하기 원한다면, 메소드 둥근 괄호(parentheses) 이후에 옵셔널 체인음 물음표를 두면 됩니다.
```swift
if let beginsWithThe =
    john.residence?.address?.buildingIdentifier()?.hasPrefix("The") {
    if beginsWithThe {
        print("John's building identifier begins with \"The\".")
    } else {
        print("John's building identifier does not begin with \"The\".")
    }
}
// Prints "John's building identifier begins with "The"."
```
>NOTE
>위 예제에서 둥근 괄호 다음에 옵셔널 체인 물음표를 놓았는데, 묶고자 하는 옵션값이 `buildingIndentifer()` 자체가 아니라 `buildingIndentifer()` 메소드의 반환값이기 때문입니다.

