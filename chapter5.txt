# 05 문자열과 문자 (Strings and Characters)
> Translator : 해탈 (kimqqyun@gmail.com)

_문자열_은 `"hello, world"` 또는 `"albatross"` 와 같은 문자의 컬렉션입니다. Swift 문자열은 `String` 타입으로 표시되며, `String`의 내용은 `Character` 값들의 collection을 포함한 여러 가지 방법으로 접근할 수 있습니다.

Swift `String` 및 `Character` 타입은 코드와 함께 텍스트 작업에서 유니코드 호환을 완벽 지원하며 빠릅니다. 문자 생성 및 조작을 위한 구문은 C 문자열과 유사한 구문을 사용하여 가볍게 읽을 수 있습니다. 문자열 연결은 두 문자열을 추가할 때 `+` 연산자를 추가하는 것만큼 간단하며 문자열의 가변성은 Swift의 다른 값들처럼 상수나 변수 중 하나를 선택해서 관리됩니다.

Swift의 `String` 유형은 문법이 단순함에도, 빠르고 현대적으로 구현하였습니다. 모든 문자열 인코딩이 독립적인 유니코드 문자로 구성, 다양한 유니코드 표현에 접근하기 위한 지원을 제공합니다.


> NOTE 
> Swift의 `String` 타입은 Foundation의 `NSString` 클래스에 연결됩니다. 당신이 Cocoa의 Foundation 프레임워크로 작업하는 경우, 모든 `NSString`의 API는 `AnyObject`에 기술된대로 `NSString`로 타입 캐스팅을 할 때 , 어떤 `String` 값이라도 호출할 수 있습니다.
> Foundation과 Cocoa와 함께 사용하는 `String`에 대한 더 자세한 정보는 [Using Swift With Cocoa and Objective-C]() 를 참조하십시오.

## 문자열 리터럴

코드 내에서 미리 정의된 `String` 값인 리터럴 등을 포함할 수 있습니다. 문자열 리터럴이란 큰 따옴표로 둘러싸인 텍스트 문자의 고정된 순서입니다.

문자열 리터럴은 상수나 변수의 초기값을 제공하는것에 사용될 수 있습니다.
```swift
let someString = "Some string literal value"
```

Swift는 `someString`의 상수에 대해서 `String`의 타입을 추론합니다. 왜냐하면, 문자열 리터럴 값으로 초기화 되었기 때문입니다.

> Note
>
> 문자열 리터럴에서 특수문자를 사용하는 것에 대해, [Special Characters in String Literals](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-ID295)를 참고하세요.

## 빈 문자의 초기화 (Initializing an Empty String)

긴 문자열을 만들기 위한 포인트를 위해 빈 `String` 값을 만들려면 빈 문자열 리터럴을 변수에 할당하거나 초기화 문법을 사용하여 새 `String` 인스턴스를 초기화합니다.

```swift
var emptyString = ""               // 빈 문자열 리터럴
var anotherEmptyString = String()  // 초기화 문법
// 두 문자열 모두 비어있으며 서로 똑같다.
```

`isEmpty`의 불리언 속성을 체크하여 문자열 값이 비어있는지 여부를 확인할 수 있습니다.
```swift
if emptyString.isEmpty {
    print("여기엔 아무것도 보이지 않습니다.")
}
// prints 여긴 아무것도 보이지 않습니다."
```

## 문자열 가변성

당신은 `String`이 상수나 변수에 할당함으로서, String이 수정(복제)할 수 있는지와 수정할 수 없는지를 가리킬 수 있습니다.

```swift
var variableString = "Horse"
variableString += " and carriage"
// variableString 은 "Horse and carriage" 입니다.

let constantString = "Highlander"
constantString += " and another Highlander"
// 컴파일 에러 - 상수 문자열은 변경될 수 없습니다.
```

> NOTE
> 이 방법은 Objective-C 또는 Cocoa에서 다른 방법으로 접근합니다. 문자열이 변경될 수 있는지를 나타내기 위해 두 개의 클래스 (`NSString` 또는 `NSMutableString`) 사이에서 선택할 수 있습니다.

## 문자열 값 타입 (Strings Are Value Types)

Swift의 `String` 타입은 값 타입입니다. 새 `String` 값을 만드는 경우에 상수 또는 변수에 할당되면 그 문자열 값이 함수나 메소드에 전달 될 때 복사됩니다. 각각의 경우에 기존의 `String` 값의 새 복사본이 전달되거나 복사되며 이는 원래의 버전이 아닙니다. 값 타입은 [Structurs and Enumerations Are Value Types]()를 참조하십시오.

Swift의 `String` 기본 복사 동작(copy-by-default)은 문자열 값이 함수나 메소드에의해 수행될 때 어디에서 오는지 상관없이 정확한 `String` 값을 소유하고 깨끗한지 확인합니다. 스스로 수정하지 않는 한 전달된 문자열이 수정되지 않는다는 것을 보장합니다. 

내부적으로 Swift의 컴파일러는 실제 복사가 반드시 필요한 경우에만 발생하도록 최적화하고 있습니다. 이 뜻은 문자열을 값 타입으로 작업할 때 가장 좋은 성능을 발휘한 다는 의미입니다.

## 문자와 작업하기 (Working with Charaters)

`String`의 각각 `Character` 값에 대해 `for-in` 루프의 문자 반복을 사용하여 각각의 문자의 값에 접근할 수 있습니다.

```swift
for character in "Dog!🐶"{
	print(character)
}
// D
// o
// g
// !
// 🐶
```

`for-in` 루프에 대해서는 [For Loops](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID121) 를 참조하십시오.

그 대신에 당신은 stand-alone `Character` 상수나 변수를 한 문자의 문자열 리터럴에서 `Character` 타입을 지정함으로 만들 수 있습니다.

```swift
let yenSign: Character = "!"
```

`String` 값은 초기화를 위한 argument로서 `Character` 값들의 array를 통과해서 만들어질 수 있습니다.

```swift
let catCharacters: [Character] = ["C", "a", "t", "!", "🐱"]
let catString = String(catCharacters)
print(catString)
// Prints "Cat!🐱"
```

## 문자열 및 문자 합치기(Concatenating Strings and Characters)

`String`은 덧셈 연산자(`+`)를 사용해서 새로운 `String` 값을 만들 수 있습니다.

```swift
let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2
// welcome now equals "hello there"
```
또한 덧셈 할당연산자(+=)로 기존의 `String` 변수에 `String` 값을 추가할 수 있습니다.
```swift
var instruction = "look over"
instruction += string2
// instruction now equals "look over there"
```

`Character` 값을 `String` 변수의 `append()` 메소드를 이용해서, `String` 변수에 추가할 수 있습니다.

```swift
let exclamationMark: Character = "!"
welcome.append(exclamationMark)
// welcome now equals "hello there!"
```

> NOTE
>
> `Character` 값은 하나의 문자만을 포함해야만 하기 때문에 기존의 `Character` 변수에 `String`이나 `Character`를 추가할 수 없습니다.

## 문자열 삽입

문자열 삽입은 상수, 변수, 리터럴 그리고 표현식을 혼합하여 이용 및 문자열 안에 문자 값을 포함하여 새로운 `String` 값을 만드는 방법입니다. 문자열 리터럴에 삽입된 각 항목은 백슬래시가 앞에 있으며 한 쌍의 괄호로 싸여있습니다.
```swift
let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5"
```
위의 예에서 `multiplier`의 값은 `\(multiplier)` 문자열 리터럴로 삽입됩니다. 이 플레이스홀더는 실제 문자열 삽입이 평가될 때 `multiplier`의 실제 값으로 치환됩니다.

`multiplier`의 값은 큰 문자열 표현식 나중의 일부입니다. 이 표현식은 `Double(mutiplier) * 2.5` 의 값을 계산하고 문자열로 결과 (`7.5`)를 삽입됩니다. 이 경우에 문자열 리터럴 내부에 포함된 경우 표현은 `\(Double(multiplier) * 2.5)`로 기록됩니다.


> NOTE
> 문자열에 삽입된 괄호안에 쓰는 표현으로 이스케이프 큰 따옴표 (`"`) 또는 백 슬래시(`\`)와 캐리지 리턴 및 줄바꿈을 포함할 수 없습니다.

## Unicode

*Unicode*는 서로 다른 시스템에서 텍스트의 인코딩과 표현, 처리를 위한 국제 표준입니다. 이것은 표준화된 형식 안에서 어떤 언어든 대부분의 문자로 표현 가능하게 합니다. 그리고 웹페이지나 텍스트 파일 같은 외부 소스로부터 그들의 문자를 읽거나 쓸 수 있게 해 줍니다. Swift의 `String`과 `Character` 타입은 모두 이 섹션에 기술된 대로, Unicode-compliant입니다.

### Unicode Scalars

내부적으로, Swift의 native `String` 타입은 Unicode scalar 값으로부터 만들어졌습니다. Unicode scalar는 문자나 수식어를 위한, `LATIN SMALL LETTER A("a")`를 나타내는 `U+0061`나, `FRONT-FACING BABY CHICK("🐥")`를 나타내는 `U+1F425`와 같은 특수한 21비트의 숫자입니다.

> Note
>
> Unicode scala는 `U+0000`에서 `U+D7FF`의 범위 또는 `U+E000`에서 `U+10FFFF`를 포함하는 범위의 Unicode code point입니다. Unicode scalars는 `U+D800`에서 `U+DFFF`의 범위를 포함하는 Unicode *surrogate pair* code를 포함하지 않습니다.

모든 21-bit의 Unicode scalars가 문자에 할당되지 않음을 기억하세요. 약간의 scalas는 미래의 할당을 위해 남겨져 있습니다. 문자에 할당된 Scalars는 위에서 본 예제같이 일반적으로 `LATIN SMALL LETTER A`나 `FRONT-FACING BABY CHICK`과 같은 이름을 가지고 있습니다.

### Spacial Characters in String Literals

문자열 리터럴은 다음과 같은 특수문자를 포함할 수 있습니다.

- 이스케이프 특별 문자 `\0` (null 문자), `\\` (백슬래시), `\t` (수평 탭), `\n` (줄 바꿈), `\r` (캐리지 리턴), `\"` (큰따옴표), `\'` (작은따옴표)
- `\u{n}`으로 쓰여지는(n은 값을 가진 1-8 자리의 16진법의 수) 임의의 Unicode scalar - 값이 유효한 Unicode code point

아래의 코드는 여러 종류의 특수문자의 예를 나타냅니다. `wiseWords` 상수는 두 개의 이스케이프 문자가 포함되어 있습니다. `dollarSign` 과 `blackHeart` 및 `sparklingHeart` 상수는 세 가지 다른 유니코드 스칼라 문자 형식을 보여줍니다.

```swift
let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
let blackHeart = "\u{2665}"      // ♥,  Unicode scalar U+2665
let sparklingHeart = "\u{1F496}" // 💖, Unicode scalar U+1F496
```

### Extended Grapheme Clusters

Swift의 `Character` 타입의 모든 인스턴스는 하나의 *extended Grapheme Clusters*를 나타냅니다. extended Grapheme Clusters는 하나나 더 많은 Unicode scalars(합쳐졌을 때 사람이 읽을 수 있는 문자 하나를 만드는)의 연속입니다.

예제를 봅시다. 문자`é`는 하나의 Unicode scalar `é` (`LATIN SMALL LETTER E WITH ACUTE` 또는 `U+00E9`)로 나타납니다. 하지만, 같은 문자열이 scalar의 쌍으로 표현될 수 있습니다. -`COMBINING ACUTE ACCENT` scalar (`U+0301`)에 이어서 오는 표준 문자 `e`(`LATIN SMALL LETTER E`, 또는 `U+0065`) `COMBINING ACUTE ACCENT` scalar는 그것에 앞선 scalar로 graphically 적용됩니다. 그래서 `e`를 `é`로 Unicode 인식이 가능한 텍스트 렌더링 시스템에 의해 렌더링 될 때 바꿉니다.

두 경우 모두, 문자 `é`는 extended grapheme cluster를 나타내는 하나의 Swift `Character` 값을 나타냅니다. 첫 번째 케이스에서, cluster는 하나의 scalar는 포함합니다. 두 번째의 케이스에서는 두 scalar의 클러스터입니다.

```swift
let eAcute: Character = "\u{E9}"                         // é
let combinedEAcute: Character = "\u{65}\u{301}"          // e followed by ́
// eAcute is é, combinedEAcute is é
```

Extended grapheme cluster는 하나의 `Character` 값으로서 복잡한 스크립트 문자를 나타내는 유연한 방법입니다. 예를 들어, 대한민국의 언어인 한글 음절은 미리 만들거나 분해되는 시퀀스로 나타납니다. 이것은 두 가지 모두 Swift에서 하나의 `Character`로 만들 수 있습니다.

```swift
let precomposed: Character = "\u{D55C}"                  // 한
let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"   // ᄒ, ᅡ, ᆫ
// precomposed is 한, decomposed is 한
```

Extended grapheme cluster는 scalars를 닫힌 마크(`COMBINING ENCLOSING CIRCLE`, 또는 `U+20DD`과 같은)를 하나의 `Character` 값의 일부로서 다른 Unicode scalars의 닫힘으로 가능하게 합니다.

```swift
let enclosedEAcute: Character = "\u{E9}\u{20DD}"
// enclosedEAcute is é⃝
```

지역의 인디케이터 심볼을 위한 Unicode scalars는 `REGIONAL INDICATOR SYMBOL LETTER U` (`U+1F1FA`) 과 `REGIONAL INDICATOR SYMBOL LETTER S` (`U+1F1F8`)의 조합같은 하나의 `Character` 값으로 조합될 수 있습니다.

```swift
let regionalIndicatorForUS: Character = "\u{1F1FA}\u{1F1F8}"
// regionalIndicatorForUS is 🇺🇸
```

## Counting Characters

문자열에서 `Character` 값의 수를 검색하기 위해서는 문자열의 `characters` 속성에서 `count` 속성을 사용하면 됩니다.

```swift
let unusualMenagerie = "Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪"
print("unusualMenagerie has \(unusualMenagerie.characters.count) characters")
// Prints "unusualMenagerie has 40 characters"
```

Swift의 `Character` 값에 대한 extended grapheme cluster의 사용은 문자열 concatenation과 modification이 항상 문자열 개수에 영향을 미치지 않을 수 있습니다.

예를 들어, `cafe` 라는 네 글자의 문자로 된 단어를 초기화 한 후, 문자열 끝에 `COMBINING ACUTE ACCENT` (`U+0301`)를 추가한다면, 문자열 개수의 결과는 네 번째 문자가 `é`가 아닌 `e`로 여전히 `4`를 나타낼 것 입니다.

```swift
var word = "cafe"
print("the number of characters in \(word) is \(word.characters.count)")
// Prints "the number of characters in cafe is 4"
 
word += "\u{301}"    // COMBINING ACUTE ACCENT, U+0301
 
print("the number of characters in \(word) is \(word.characters.count)")
// Prints "the number of characters in café is 4"
```

> Note
>
> Extended grapheme cluster는 하나 혹은 그 이상의 Unicode scalars로 조합될 수 있습니다. 이것은 서로 다른 문자(같은 문자의 서로 다른 표현)는 저장되는데 서로 다른 메모리 크기를 요구할 수 있다는 의미입니다. 이것 때문에 Swift에서 characters는 문자열의 표현에서 각각 같은 양의 메모리를 차지하지 않습니다. 그 결과 문자열안에서 문자의 수가 그것의 extended grapheme cluster 경계에서 결정되는 문자열에서 반복되어 계산될 수 없습니다. 만약 당신이 특별히 긴 문자열 값으로 작업한다면, `characters` 속성이 문자열에 대한 characters를 결정하는데 항상 전체 문자열에서 Unicode scalars로 iterate되어야 함을 명심하세요.
>
> `characters` 속성에 의해 문자의 수로 리턴되는 카운트는 항상 `NSString`이 포함하는 문자의 `length` 속성과 항상 같지는 않습니다. `NSString`의 길이는 문자열의 Unicode extended grapheme cluster의 수가 아닌, 문자열의  UTF-16 표현 안에서 16비트 코드 단위의 숫자에 기반합니다.

## Accessing and Modify String

당신은 문자열을 메소드와 속성, 혹은 subscript 문법을 사용해서 접근 및 수정을 할 수 있습니다.

### String Indices

각각의 `String` 값은 관련된 index 타입 `String.Index`을 가지고 있습니다. 이것은 문자열 안에서 각각의 `Character`의 위치에 대응됩니다.

위에서 언급한대로, 서로 다른 문자들은 저장되는데 서로 다른 크기의 메모리를 요구합니다. 그래서 어떤 `Character`가 특정위치에 있는지를 결정하기 위해, 당신은 그 `String`의 시작이나 끝에서 각각의 Unicode scalar를 iterate 해야만 합니다. 이런 이유로, Swift의 문자열은 정수값으로 indexed 될 수 없습니다.

`String`의 첫 `Character`의 위치에 접근하기 위해, `startIndex` 속성을 사용합니다. `endIndex` 속성은 `String`의 가장 마지막 문자 후의 위치입니다. 그 결과, `endIndex` 속성은 문자열의 subscript에 유효한 argument가 아닙니다. 만약 `String`이 비어있다면, `startIndex`와 `endIndex`는 같습니다.

`String.Index` 값은 `predecessor()` 메소드를 호출함으로 즉시 접근할 수 있습니다. 그리고 `successor()` 메소드에 의해 즉시 succeeding index에 접근할 수 있습니다. `String`의 어떠한 index라도 다른 index에서 그것들의 메소드를 함께 연결함으로서, 그리고 `advancedBy(_:)` 메소드를 사용함으로서 접근할 수 있습니다. 문자열 범위 밖에서 index에 접근하려 시도하는 것은 런타임 에러를 발생할 것입니다.

당신은 특정 `String` 인덱스에 있는 `Chacracter`에 접근하기 위해 subscript 문법을 사용할 수 있습니다.

```swift
let greeting = "Guten Tag!"
greeting[greeting.startIndex]
// G
greeting[greeting.endIndex.predecessor()]
// !
greeting[greeting.startIndex.successor()]
// u
let index = greeting.startIndex.advancedBy(7)
greeting[index]
// a
```

문자열 범위를 초과하는 인덱스의 바깥에서 `Character`의 접근에 시도하는 것은 런타임 에러를 발생할 것입니다.

```swift
greeting[greeting.endIndex] // error
greeting.endIndex.successor() // error
```

문자열에서 개별 문자들의 접근을 위한 인덱스의 모든 `Range`를 만들기 위해, `characters` 속성의 `indices` 속성을 사용하세요.

```swift
for index in greeting.characters.indices {
    print("\(greeting[index]) ", terminator: "")
}
// prints "G u t e n   T a g ! "
```

### Inserting and Removing

문자열의 특정 인덱스에 문자를 넣기 위해, `index(_:atIndex:)` 메소드를 사용하세요.

```swift
var welcome = "hello"
welcome.insert("!", atIndex: welcome.endIndex)
// welcome now equals "hello!"
```

특정 문자열에 다른 문자열의 내용을 넣기 위해, `insertContentsOf(_:at:)` 메소드를 사용하세요.

```swift
welcome.insertContentsOf(" there".characters, at: welcome.endIndex.predecessor())
// welcome now equals "hello there!"
```

문자열에서 특정 index의 문자를 지우기 위해 `removeAtIndex(_:)` 메소드를 사용하세요.

```swift
welcome.removeAtIndex(welcome.endIndex.predecessor())
// welcome now equals "hello there"
```

특정 범위에 문자열 일부를 제거할 때에는 `removeRange(_:)` 메소드를 사용하세요.

```swift
let range = welcome.endIndex.advancedBy(-6)..<welcome.endIndex
welcome.removeRange(range)
// welcome now equals "hello"
```

## 문자열 비교

Swift는 `String` 값을 비교하는 세 가지 방법을 제공합니다. : 문자열과 문자 같음(string and character equality), 전위 같음(prefix equality), 후위 같음(suffix equality)

### String and Character Equality 

문자열과 문자의 동일함은 [Comparision Operators]()에 기술된 대로, 같음을 체크하는데는 오퍼레이터(`==`)에 의해, 같지 않음을 체크하는데는 오퍼레이터(`!=`)에 의해 이루어집니다.

```swift
let quotation = "We're a lot alike, you and I."
let sameQuotation = "We're a lot alike, you and I."
if quotation == sameQuotation {
    print("These two strings are considered equal")
}
// Prints "These two strings are considered equal"
```

두 `String` 값 (혹은 두 `Character` 값)은 그들의 extended grapheme cluster가 *canonically equivalent*라면, 같은 것으로 여겨집니다. Extended grapheme cluster는 만약 그들이 같은 언어의 의미나 외형을 가지고 있을 때, 심지어 그들의 내부적으로는 서로 다른 Unicode scalars로부터 조합된다 하더라도, *canonically equivalent* 합니다.

예를 들어, `LATIN SMALL LETTER E WITH ACUTE` (`U+00E9`)는 `LATIN SMALL LETTER E`(`U+0065`)와 `COMBINING ACUTE ACCENT` (`U+0301`)의 결합과 canonically equivalent 합니다. 이들 extended grapheme clusters 둘 다 문자 `é`를 표현하기 위한 유효한 방법입니다. 따라서 그들은 canonically equivalent 한 것이라 여겨집니다.

```swift
// "Voulez-vous un café?" using LATIN SMALL LETTER E WITH ACUTE
let eAcuteQuestion = "Voulez-vous un caf\u{E9}?"
 
// "Voulez-vous un café?" using LATIN SMALL LETTER E and COMBINING ACUTE ACCENT
let combinedEAcuteQuestion = "Voulez-vous un caf\u{65}\u{301}?"
 
if eAcuteQuestion == combinedEAcuteQuestion {
    print("These two strings are considered equal")
}
// Prints "These two strings are considered equal"
```

반대로, 영어에서 사용되는 `LATIN CAPITAL LETTER A` (`U+0041`, 또는 `"A"`)는 러시아어에서 사용되는 `CYRILLIC CAPITAL LETTER A` (`U+0410`, 또는 `"А"`)와 같지 않습니다. 문자는 유사해 보이지만, 그것들은 서로 다른 언어의 의미를 가지고 있기 때문입니다.

```swift
let latinCapitalLetterA: Character = "\u{41}"
 
let cyrillicCapitalLetterA: Character = "\u{0410}"
 
if latinCapitalLetterA != cyrillicCapitalLetterA {
    print("These two characters are not equivalent")
}
// Prints "These two characters are not equivalent"
```

> NOTE
>
> Swift에서 문자열과 문자 비교는 지역 민감성(locale-sensitive)은 아닙니다.

### Prefix and Suffix Equality

문자열이 특정 문자열의 전위 또는 후위가 있는지를 확인하기 위해, 문자열의 `hasPrefix` 및 `hasSuffix` 메서드를 호출합니다. 두 메소드는 `String` 타입의 하나의 변수를 취하고, Boolean 값을 반환합니다. 

아래의 예는 *셰익스피어의 로미오와 줄리엣*의 처음 두 액트에서의 신 로케이션의 제목의 문자열을 배열로 나타낸 것입니다.

```swift
let romeoAndJuliet = [
    "Act 1 Scene 1: Verona, A public place",
    "Act 1 Scene 2: Capulet's mansion",
    "Act 1 Scene 3: A room in Capulet's mansion",
    "Act 1 Scene 4: A street outside Capulet's mansion",
    "Act 1 Scene 5: The Great Hall in Capulet's mansion",
    "Act 2 Scene 1: Outside Capulet's mansion",
    "Act 2 Scene 2: Capulet's orchard",
    "Act 2 Scene 3: Outside Friar Lawrence's cell",
    "Act 2 Scene 4: A street in Verona",
    "Act 2 Scene 5: Capulet's mansion",
    "Act 2 Scene 6: Friar Lawrence's cell"
]
```
Act 1의 장면의 수를 `romeoAndJuliet` 배열에 `hasPrefix`를 사용하여 계산할 수 있습니다.

```swift
var act1SceneCount = 0
for scene in romeoAndJuliet {
    if scene.hasPrefix("Act 1 ") {
        act1SceneCount += 1
    }
}
print("There are \(act1SceneCount) scenes in Act 1")
// Prints "There are 5 scenes in Act 1"
```

마찬가지로 `hasSiffix` 메소드를 사용하여 Capulet's mansion과 Friar Lawrence's cell의 장면의 수를 계산합니다.

```swift
var mansionCount = 0
var cellCount = 0
for scene in romeoAndJuliet {
    if scene.hasSuffix("Capulet's mansion") {
        mansionCount += 1
    } else if scene.hasSuffix("Friar Lawrence's cell") {
        cellCount += 1
    }
}
print("\(mansionCount) mansion scenes; \(cellCount) cell scenes")
// Prints "6 mansion scenes; 2 cell scenes"
```

> NOTE
>
> `hasPrefix(_:)`과 `hasSuffix(_:)` 메소드는 [String and Character Equality](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/StringsAndCharacters.html#//apple_ref/doc/uid/TP40014097-CH7-ID299)에 기술된대로, 문자열의 extended grapheme clusters 사이에서 문자 단위의 canonical equivalence comparison로 이루어집니다.

## 문자열의 유니코드

Unicode 문자열이 텍스트 파일이나 다른 저장소에 쓰여질 때, 문자열의 Unicode scalars는 여러 Unicode 정의 중 하나의 형식으로 인코딩됩니다. 각 형식은 코드 단위로 알려진 작은 덩어리의 문자열을 인코딩합니다. 이들은 UTF-8 (8bit 코드 단위로 문자열을 인코딩) 형식과 UTF-16 (16bit 코드 단위로 문자열을 인코딩) 형식, 그리고 UTF-32 인코딩 형식(32bit 코드 단위로 문자열을 인코딩)을 포함하고 있습니다.

Swift는 문자열의 유니코드 표현에 접근할 수 있는 여러 가지 방법을 제공합니다. 유니코드 문자로 개별 `Character` 값에 접근을 `for-in` 구문으로 반복할 수 있습니다. 이 과정은 [문자와 작업하기]()에 설명되어있습니다.

또한, 유니코드 호환 표현 중 하나의 `String` 값에 접근:

- UTF-8 코드단위의 컬렉션(문자열의 `utf8` 속성으로 접근합니다.)
- UTF-16 코드단위의 컬렉션 (문자열의 `utf16` 속성으로 접근합니다.)
- 문자열의 UTF-32 인코딩 형식과 동일한 UTF-21bit 유니코드 스칼라 값의 컬렉션 (문자열의 `unicodeScalars` 속성에 접근)

아래의 예에서는 문자열을 나타내기 위한 다른 방법들을 보여줍니다. `D`,`o`,`g`,` ‼` (`DOUBLE EXCLAMATION MARK`, 혹은 Unicode scalar `U+203C`) 및 🐶문자 (`DOG FACE` 또는 유니코드 스칼라 `U+1F436`) 문자로 구성되어 있습니다. 

```swift
let dogString = "Dog‼🐶"
```

### UTF-8 

`String`의 UTF-8 표현에 `utf8` 속성을 iterating 함으로 접근할 수 있습니다. `String.UTF8View` 타입의 속성은 부호 없는 8 bit(`UInt8`) 값의 모음이며 문자열의 UTF-8 의 각 바이트 문자열 표현입니다.

![UTF8_2x](images/UTF8_2x.png)

```swift
for codeUnit in dogString.utf8 {
    print("\(codeUnit) ", terminator: "")
}
print("")
// 68 111 103 226 128 188 240 159 144 182
```

위의 예에서 첫 번째 세 개의 십진수 `codeUnit` 값(`68`,`111`,`103`)은 그 문자 UTF-8로 표현과 동일한 `D`,`o`,`g` 를 나타내며 이것들은 ASCII의 표현과 동일합니다. 다음 세 개의 `codeUnit` 값(`226`, `128`, `188`)은 `DOUBLE EXCLAMATION MARK` 문자의 세 바이트의 UTF-8 표현입니다. 마지막 네 개의 `codeUnit`의 값(`240`,`159`,`144`,`182`)은 `DOG FACE`의 4바이트 UTF-8 표현입니다.

### UTF-16

`String`의 `utf16` 속성을 iterate하여 UTF-16 표현에 접근할수 있습니다. `String.UTF16View` 타입의 속성은 부호 없는 16 bit(`UInt16`)값의 모음이며 문자열의 UTF-16의 각 바이트 문자열 표현입니다.:

![UTF16_2x](images/UTF16_2x.png)

```swift
for codeUnit in dogString.utf16 {
    print("\(codeUnit) ", terminator: "")
}
print("")
// 68 111 103 8252 55357 56374
```

다시 처음 세 가지 `codeUnit`의 값(`68`,`111`, `103`)은 UTF-16 코드 단위의 값은 UTF-8의 문자열 표현과 같은 값을 가지며 `D`,`o`,`g`를 표현합니다. 이 값은 UTF-8에서와 같습니다. (왜냐하면, 이 Unicode scalars는 ASCII 문자를 나타내기 때문입니다.)

네 번째 `codeUnit`인 `8252`는 16진수로 `203C`와 동일한데, 이것은 `DOUBLE EXCLAMATION MARK`에 대한 Unicode scalar `U+203C`를 나타냅니다. 이 문자는 UTF-16에서는 하나의 코드로 표현할 수 있습니다.

다섯 번째와 여섯 번째 `codeUnit`의 값(`55357` 과 `56374`)는 `DOG FACE` 문자를 UTF-16을 써로게이트 페어로 표현한 것입니다. 이 값은 `U+D83D`(십진수 값 `55357`)의 high 써로게이트 값과 `U+DC36`(십진수 값 `56374`)의 low 써로게이트 값입니다.  

### 유니코드 스칼라

`unicodeScalars` 속성을 반복하여 `String` 값의 유니코드 스칼라 표현에 접근할 수 있습니다. 이 속성타입은 `UnicodeScalarView` 이며 `UnicodeScalar` 값 타입의 컬렉션입니다. 

각각의 `UINT32`값을 대표하는 `UnicodeScalar`는 `value` 속성으로 scalar의 21-bit 값을 리턴합니다. ![UnicodeScalar_2x](images/UnicodeScalar_2x.png)

```swift
for scalar in dogString.unicodeScalars {
    print("\(scalar.value) ", terminator: "")
}
print("")
// 68 111 103 8252 128054
```

`Value` 속성들은 처음 세 개의 `UnicodeScalar` 값(`68`, `11`, `103`)을 다시 문자 `D`, `o`, `g`를 표현합니다.

네 번째 `codeUnit` 값인 (`8252`)는 다시 16진수 값인 `203C`와 동일합니다. 이것은  `DOUBLE EXCLAMATION MARK`를 나타내는 Unicode scalar `U+203C`입니다.
다섯 번째이면서 마지막인 `UnicodeScalar`의 `Value` 속성은 십진법의 `128054`이며 16진법 `1F436`과 같습니다. 이는 `DOG FACE` 문자인 유니코드 스칼라 `U+1F436`과 같습니다.

`Value` 속성들을 쿼리하는 대신 각 `UnicodeScalar` 값은 또한 문자열 삽입으로 새로운 `String` 값을 생성하는데 사용될 수 있습니다.

```swift
for scalar in dogString.unicodeScalars {
    print("\(scalar) ")
}
// D
// o
// g
// ‼
// 🐶
```
