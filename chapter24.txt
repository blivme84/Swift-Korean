# 24. 프로토콜

*프로토콜*은 특정한 일이나 기능의 일부에 대한 메소드나 속성이나 다른 요구사항들의 청사진을 정의합니다. 프로토콜은 그리고 나서 그것들의 요구사항들의 실제적인 구현을 제공하기 위해 클래스나 구조체, 열거형에 의해서 채택됩니다. 프로토콜의 요구들을 만족하는 어떤 타입은 프로토콜에 들어맞다고 이야기 할 수 있다.

추가적으로, 명시된 요구사항은 반드시 들어맞는 타입에 구현되어야 하며, 당신은 프로토콜을 그 요구사항들의 일부를 구현하기 위해 혹은 들어맞는 타입을 이용하는 추가적인 기능을 구현하기 위해 확장할 수 있습니다.

## 프로토콜 문법
프로토콜은 클래스, 구조체, 열거체와 매우 비슷한 방법으로 정의합니다.

``` swift
protocol SomeProtocol {
    // 여기에는 프로토콜 정의가 들어갑니다.
}
```

그들의 정의의 일부로, 콜론으로 구분해서 타입의 이름 뒤에 프로토콜의 이름을 위치시킴으로 특정 프로토콜을 채택해 커스텀 타입들의 상태를 나타냅니다. 여러 프로토콜이 올 수 있으며, 쉼표로 구분합니다.

``` swift
struct SomeStructure: FirstProtocol, AnotherProtocol {
    // 여기에는 구조체 정의가 들어갑니다.
}
```

클래스가 부모클래스가 있다면, 부모클래스의 이름은 어떤 프로토콜이 채택되기 전에 컴마로 구분지어서 위치되어야 합니다. 

``` swift
class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {
    // 여기에는 클래스 정의가 들어갑니다.
}
```

## 속성 요구사항
프로토콜은 특정 이름과 속성을 갖는 인스턴스 속성과 타입 속성을 제공하기 위해, 어떤 들어맞는 타입을 요구할 수 있습니다. 프로토콜에는 이 속성이 저장된 속성이어야하는지 계산된 속성이어야 하는지에 대해 명시하지 않습니다. 단지 속성의 이름과 타입만 명시합니다. 또한 각 속성에 대해 읽기(gettable)인지 읽기/쓰기(gettable/settable)가 필요한지 명시할 수 있습니다.

만약 프로토콜이 프로퍼티의 읽기/쓰기를 요구한다면, 프로퍼티 요구는 상수 저장 프로퍼티나 읽기 전용 계산 프로퍼티로 충족될 수 없습니다. 만약 프로토콜이 오직 읽기만하는 속성을 요구한다면, 요구는 어떤 타입의 속성에 의해서도 만족될 수 있고, 당신만의 코드를 위해 유용하다면, 쓰기 속성이 있어도 유효합니다.

프로퍼티 요구는 항상 `var` 키워드가 앞에 붙는 변수 프로퍼티로 선언됩니다. 읽기/쓰기 프로퍼티는 `{ get set }`을 작성함으로 나타내고, 읽기 프로퍼티는 ` { get }`을 작성함으로 가리킵니다.

``` swift
protocol SomeProtocol {
    var mustBeSettable: Int { get set }
    var doesNotNeedToBeSettable: Int { get }
}
```

항상 앞에 붙는 타입 프로퍼티 요구사항은 프로토콜에서 그들을 정의할 때, `static` 키워드와 함께옵니다. 이 룰은 클래스에 의해 구현될 때, 심지어 프로퍼티 요구사항이 `class`나  `static` 키워드 같은 타입이 와도 앞에 붙어도 적용됩니다.

```swift
protocol AnotherProtocol {
    static var someTypeProperty: Int { get set }
}
```

여기의 예제는 싱글 인스턴스 프로퍼티 요구사항의 프로토콜에 대한 것입니다.

```swift
protocol FullyNamed {
    var fullName: String { get }
}
```

`FullyNamed` 프로토콜은 모든 조건을 갖춘 이름을 제공하기 위해 일치하는 타입을 요구합니다. 그 프로토콜은 들어맞는 타입의 본성에 대한 어떤 것도 명시하지 않습니다. 그것은 단지 전체 이름을 그 스스로 제공할 수 있어야 하는 타입만을 명시할 뿐입니다. 프로토콜은 어떤 `FullyNamed` 타입이 항상 `String` 타입의 `fullName`이라 불리는 읽기 인스턴스를 가져야하는 상태를 나타냅니다.

다음의 예제는 `FullyNamed` 프로토콜에 일치하는 간단한 구조체에 대한 것입니다.

``` swift
struct Person: FullyNamed {
    var fullName: String
}
let john = Person(fullName: "John Appleseed")
// john.fullName is "John Appleseed"
```

이 예제에서는 `Person`이라고 불리는 구조체를 정의하였고, 특정한 이름을 가진 사람을 대표합니다. 그것의 상태는 `FullyNamed` 프로토콜을 그것의 정의의 첫 번째 줄의 일부로 채택하였습니다.

각각의 `Person` 인스턴스들은 `String` 타입의 `fullName` 속성 하나를 가집니다. 이는 `FullNamed` 프로토콜의 하나의 요구사항과 일치하며, `Person`이 확실하게 프로토콜에 일치한다는 것을 의미합니다. (스위프트에서는 프로토콜의 요구사항이 채워지지 않으면 컴파일타임에 에러를 발생합니다.)


`FullNamed` 프로토콜을 적용하고 프로토콜에 일치하는 조금 더 복잡한 클래스를 살펴봅시다.

``` swift
class Starship: FullyNamed {
    var prefix: String?
    var name: String
    init(name: String, prefix: String? = nil) {
        self.name = name
        self.prefix = prefix
    }
    var fullName: String {
        return (prefix != nil ? prefix! + " " : "") + name
    }
}
var ncc1701 = Starship(name: "Enterprise", prefix: "USS")
// ncc1701.fullName is "USS Enterprise"
```

이 클래스에서는 계산된 읽기전용 속성으로 `fullName` 속성을 구현했습니다.
각 `Starship` 클래스 인스턴스는 `name`을 필수로 `prefix`를 옵션으로 가집니다. `prefix` 값이 존재하면 `name`의 앞에 붙여서 우주선의 풀네임을 만들어 `fullName` 속성이 됩니다.


## 메소드 요구사항

프로토콜은 일치하는 타입을 구현하기 위해 인스턴스 메소드들과 타입 메소드들을 요구사항으로 명시할 수 있습니다. 중괄호나 메소드 구현체(body)만 없을 뿐, 일반적인 인스턴스 메소드나 타입 메소드를 정의하는 것과 정확히 같은 방법으로 정의됩니다. 일반 메소드와 같은 룰을 조건으로, 가변적인 파라메터가 허용됩니다. 하지만, 기본값은 프로토콜 정의에서 메소드 파라메터로 명시될 수 없습니다.

타입 프로퍼티 요구사항들로서, 당신은 프로토콜에서 그들을 정의할 때, 타입 메소드 요구사항들 앞에 `static` 키워드를 붙여야 합니다. 이것은 심지어 타입 메소드 요구사항들이 클래스를 구현할 때, `class`나 `static` 키워드가 앞에 붙어있어도, 참입니다.

```swift
protocol SomeProtocol {
    static func someTypeMethod()
}
```

다음은 인스턴스 메소드 하나만 있는 프로토콜을 정의하는 예제입니다.

``` swift
protocol RandomNumberGenerator {
    func random() -> Double
}
```

이 프로토콜 `RandomNumberGenerator`은 호출되면 `Double` 값을 리턴하는 `random`이라는 인스턴스 메소드를 가지는 일치하는 타입을 요구합니다. 비록 프로토콜에서는 명시되지 않았지만, 이 값은 `0.0` 이상 `1.0` 미만의 값을 리턴할 것을 가정합니다.

`RandomNumberGenerator` 프로토콜은 어떻게 각각의 랜덤 숫자가 생성되는지에 대한 가정을 하지 않습니다. 단지, 새로운 랜덤 숫자를 만드는 표준의 방법을 제공하기 위한 발생기를 요구합니다.

여기에 `RandomNumberGenerator` 프로토콜을 적용하고 일치하는 클래스 구현체가 있습니다. 다음의 클래스는 *선형 합동 생성기(linear congruential generator)*라는 의사난수 생성 알고리즘을 구현한 것입니다.

``` swift
class LinearCongruentialGenerator: RandomNumberGenerator {
    var lastRandom = 42.0
    let m = 139968.0
    let a = 3877.0
    let c = 29573.0
    func random() -> Double {
        lastRandom = ((lastRandom * a + c) % m)
        return lastRandom / m
    }
}
let generator = LinearCongruentialGenerator()
print("Here's a random number: \(generator.random())")
// Prints "Here's a random number: 0.37464991998171"
print("And another one: \(generator.random())")
// Prints "And another one: 0.729023776863283"
```

## 변이(mutating) 메소드 요구사항

가끔 메소드에서 자신의 인스턴스를 수정(혹은 *변이*)할 필요가 있습니다. 밸류 타입(즉, 구조체와 열거형)의 인스턴스 메소드에서 메소드의 `func` 앞에 `mutating` 키워드를 써서 소속된 인스턴스를 바꾸거나 인스턴스 속성의 수정이 허용됨을 명시합니다. 이 과정은 [인스턴스 메소드 내에서 밸류 타입의 수정](#)에서 설명되어 있습니다.

프로토콜이 적용된 타입의 인스턴스를 변이할 수 있다고 인스턴스 메소드에 명시하려면 프로토콜 정의 앞에 `mutating` 키워드를 추가합니다. 이것은 구조체와 열거형이 메소드 요구사항을 만족하게 하고, 프로토콜을 취할 수 있게 합니다.

> NOTE
>
> 프로토콜을 `mutating`이라고 명시하면 클래스에서 메소드를 구현할 때는 `mutating` 키워드를 쓰지 않아도 됩니다. `mutating` 키워드는 구조체와 열거형에서만 쓰입니다.

다음의 예제는 `toggle`이라는 하나의 인스턴스 메소드 요구사항을 정의하는 `Togglable`이라는 프로토콜을 정의합니다. 이름에서 알 수 있듯이 `toggle()` 메소드는 보통 타입의 속성을 변환하는 것인데, 프로토콜에 일치하는 타입의 속성을 토글하거나 반전합니다.

`toggle()` 메소드는 `Togglable` 프로토콜 정의의 일부로, 그 메소드가 호출될 때, 일치하는 인스턴스의 상태를 변이시킬 것이라고 예측됨을 가리키기 위해 `mutating`로 표시되어 있습니다.

``` swift
protocol Togglable {
    mutating func toggle()
}
```

`Togglable` 프로토콜을 구조체나 열거형으로 구현하려면, `mutating`이 명시된 `toggle()` 메소드를 구현해야 프로토콜에 일치할 수 있습니다.

아래 예제는 `OnOffSwitch`라는 열거형을 정의합니다. 이 열거형은 `On`과 `Off` 두 가지 상태 사이를 토글합니다. 열거형의 `toggle` 구현체는 `Togglable` 프로토콜의 요구사항에 맞게 `mutating`이 명시되어 있습니다.

``` swift
enum OnOffSwitch: Togglable {
    case Off, On
    mutating func toggle() {
        switch self {
        case Off:
            self = On
        case On:
            self = Off
        }
    }
}
var lightSwitch = OnOffSwitch.Off
lightSwitch.toggle()
// lightSwitch is now equal to .On
```

## 요구사항들의 초기화

프로토콜은 타입에 따르게 구현되기 위해 특정한 이니셜라이저를 요구할 수 있습니다. 일반 이니셜라이저로서 완전히 같은 방식으로, 하지만 중괄호를 사용하지 않거나 이니셜라이저 바디 없이, 프로토콜의 정의의 일부로, 다음과 같은 이니셜라이저를 작성합니다.

```swift
protocol SomeProtocol {
    init(someParameter: Int)
}
```

### 프로토콜 이니셜라이저 요구사항의 클래스 구현(Class Implementations of Protocol Initializer Requirements)

클래스를 일치하는 프로토콜 이니셜라이저 요구사항을 지정 이니셜라이저나 편의 이니셜라이저 중 하나로 구현할 수 있습니다. 양쪽 모두, `required`로 이니셜라이저 구현 앞에 표시해야만 합니다.

```swift
class SomeClass: SomeProtocol {
    required init(someParameter: Int) {
        // initializer implementation goes here
    }
}
```

`required` 수식어의 사용은 당신이 모든 일치하는 클래스의 자식 클래스에 대해 이니셜라이저 요구사항의 명시적 또는 상속된 구현을 제공함을 보장합니다. 그들 또한 프로토콜을 따릅니다.

요구된 이니셜라이저에 대한 더 많은 정보는 [Required Initializers](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID231)를 참고하세요.

> NOTE
>
> `final` 수식어로 표시된 클래스에 `required` 수식어로 프로토콜 이니셜라이저 요구사항들을 표시할 필요가 없습니다. 왜냐하면, final 클래스는 자식클래스가 될 수 없기 때문입니다. `final` 수식어에 대한 더 많은 것은 [Preventing Overrides](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Inheritance.html#//apple_ref/doc/uid/TP40014097-CH17-ID202)를 참고하세요.

만약 자식클래스가 자식클래스로부터의 지정 이니셜라이저를 오버라이드 한다면, 또한 프로토콜로부터 일치하는 이니셜라이저 요구사항의 구현을 한다면, 이니셜라이저 구현을 `required`와 `override` 수식어로 모두 표시하세요.

```swift
protocol SomeProtocol {
    init()
}
 
class SomeSuperClass {
    init() {
        // initializer implementation goes here
    }
}
 
class SomeSubClass: SomeSuperClass, SomeProtocol {
    // "required" from SomeProtocol conformance; "override" from SomeSuperClass
    required override init() {
        // initializer implementation goes here
    }
}
```

### 실패가능한 이니셜라이저 요구사항(Failable Initializer Requirements)

프로토콜은 [Failable Initializers](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Initialization.html#//apple_ref/doc/uid/TP40014097-CH18-ID224)에 정의된 대로, 일치하는 타입으로서, 실패가능한 이니셜라이저 요구사항을 정의할 수 있습니다.

실패가능한 이니셜라이저 요구사항에 일치하는 타입에서 실패가능한 또는 실패가능하지 않은 이니셜라이저에 의해 만족될 수 있습니다. 실패가능하지 않은 이니셜라이저 요구사항은 실패가능하지 않은 이니셜라이저에 의해 만족될 수 있거나, 실패가능한 이니셜라이저의 암시작인 벗김으로 만족될 수 있습니다.

## 타입으로서의 프로토콜

프로토콜은 그 자체로 어떤 기능도 갖고 있지 않습니다. 하지만, 어떤 프로토콜도 코드에서 본격적인 타입처럼 쓰일 수 있습니다.

왜냐하면 프로토콜도 타입이므로, 다른 타입들이 쓰이는 곳에서 사용될 수 있습니다.
- 함수, 메소드, 생성자에서 인자의 타입 혹은 리턴 타입으로
- 상수, 변수, 속성의 타입으로
- 배열, 사전, 다른 컨테이너에서 요소의 타입으로

> 노트
>
> 프로토콜이 타입이므로 스위프트의 다른 타입(`Int`, `String`, `Double`같은)처럼 이름을 대문자(`FullyNamed`나 `RandomNumberGenerator`처럼)로 사용할 수 있습니다.

다음 예제는 프로토콜을 타입으로 사용합니다.

``` swift
class Dice {
    let sides: Int
    let generator: RandomNumberGenerator
    init(sides: Int, generator: RandomNumberGenerator) {
        self.sides = sides
        self.generator = generator
    }
    func roll() -> Int {
        return Int(generator.random() * Double(sides)) + 1
    }
}
```

이 예제는 *n*면체의 `Dice`라는 새로운 클래스를 정의합니다. `Dice`의 인스턴스는 면을 얼마나 가지고 있는지를 나타내는 `sides`라는 정수 속성과 주사위를 굴렸을 때 난수를 생성해주는 `generator` 속성을 가지고 있습니다.

`generator` 속성은 `RandomNumberGenerator` 타입의 속성입니다. 그러므로 `RandomNumberGenerator` 프로토콜을 적용한 *어떤* 타입의 인스턴스라도 할당할 수 있습니다. `RandomNumberGenerator` 프로토콜을 취해야만 하는 인스턴스를 제외하고 당신이 이 프로퍼티에 할당한 인스턴스에 올 수 없습니다.

`Dice`는 또한 초기상태를 설정하기 위한 이니셜라이저를 가지고 있습니다. 이 이니셜라이저는 또한 `RandomNumberGenerator` 타입의 `generator`이라는 파라메터를 가지고 있습니다. 새로운 `Dice` 인스턴스를 초기화 할 때, 이 파라메터 타입에 맞는 어떤 값이라도 넘길 수 있습니다.

`Dice`는 하나의 인스턴스 메소드 `roll`이 있는데, 1에서 면의 수 사이에 해당하는 정수를 리턴합니다. 이 메소드에서는 생성기의 `random()` 메소드를 호출해서 `0.0`과 `1.0` 사이의 난수값을 만들고, 정확한 범위의 주사위 값을 만들기 위해 이 랜덤 숫자를 사용합니다. `generator`가 `RandomNumberGenerator`를 적용하고 있기 때문에, `random()` 메소드가 있다는 것이 보장됩니다.

다음은 `Dice` 클래스가 어떻게 `LinearCongruentialGenerator` 인스턴스를 난수 생성기로 사용해 6면체 주사위를 만드는데 사용될 수 있음을 보여줍니다.

```swift
var d6 = Dice(sides: 6, generator: LinearCongruentialGenerator())
for _ in 1...5 {
    print("랜덤한 주사위값은 \(d6.roll())")
}
// 랜덤한 주사위값은 3
// 랜덤한 주사위값은 5
// 랜덤한 주사위값은 4
// 랜덤한 주사위값은 5
// 랜덤한 주사위값은 4
```

## 위임 (Delegation)
위임은 클래스나 구조체가 다른 타입의 인스턴스에게 책임의 일부를 넘길(혹은 *위임할*) 수 있는 디자인 패턴입니다. 이 디자인 패턴에서는 위임받은 기능을 제공하는 것을 보장하는 일치하는 타입(delegate로 알려진)과 같은 위임된 책임을 캡슐화하는 프로토콜을 정의함으로서 구현됩니다. 위임은 특정 액션에 대해 응답하거나, 외부에서 온 정보가 어떤 타입인지에 관계없이 데이터를 처리할 때 사용할 수 있습니다.

아래에 주사위를 사용한 보드게임에 두 가지 프로토콜이 정의되어 있습니다.

```swift
protocol DiceGame {
    var dice: Dice { get }
    func play()
}
protocol DiceGameDelegate {
    func gameDidStart(game: DiceGame)
    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)
    func gameDidEnd(game: DiceGame)
}
```

`DiceGame` 프로토콜은 주사위를 포함하는 어떤 게임에도 적용할 수 있는 프로토콜입니다. `DiceGameDelegate` 프로토콜은 `DiceGame`의 진행을 기록할 수 있는 어떤 타입에도 적용할 수 있는 프로토콜입니다.

앞서 [흐름 제어](#)에서 소개되었던 *뱀과 사다리*의 수정 버전입니다. 이 버전에서는 `Dice` 인스턴스를 주사위를 굴리는데 사용하고, `DiceGame` 프로토콜을 적용하였으며, 그것의 진행상황을 알리는데 `DiceGameDelegate`를 적용하였습니다.

``` swift
class SnakesAndLadders: DiceGame {
    let finalSquare = 25
    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())
    var square = 0
    var board: [Int]
    init() {
        board = [Int](count: finalSquare + 1, repeatedValue: 0)
        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
    }
    var delegate: DiceGameDelegate?
    func play() {
        square = 0
        delegate?.gameDidStart(self)
        gameLoop: while square != finalSquare {
            let diceRoll = dice.roll()
            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)
            switch square + diceRoll {
            case finalSquare:
                break gameLoop
            case let newSquare where newSquare > finalSquare:
                continue gameLoop
            default:
                square += diceRoll
                square += board[square]
            }
        }
        delegate?.gameDidEnd(self)
    }
}
```

*뱀과 사다리* 게임에 대한 설명을 원하면 [흐름 제어](#) 챕터의 [Break](#) 섹션을 살펴보세요.

이 버전에서는 `DiceGame`을 적용한 `SnakesAndLadders`라는 클래스로 감싸져 있습니다. 그것은 프로토콜에 따르기 위해 읽기 가능한 `dice` 속성과 `play()` 메소드를 가지고 있습니다. (`dice` 속성은 초기화 이후, 변할 필요가 없고, 프로토콜은 오직 읽기만 가능하기 때문에 상수 속성으로 설정되었습니다.)

*뱀과 사다리* 게임보드 설정은 클래스의 `init()` 생성자 내에서 이루어집니다. 전체 게임 로직은 주사위의 굴린 값을 제공하기 위해 프로토콜의 required `dice` 속성을 사용하는 프로토콜의 `play` 메소드 내로 옮겨졌습니다.

게임을 하기 위해 delegate가 요구되지 않기 때문에, `delegate` 속성이 옵셔널 `DiceGameDelegate`로 정의되어 있음에 주의하세요. 옵션 타입이기에, `delegate` 속성은 자동적으로 초기값이 `nil`로 설정됩니다. 그리고나서, 게임 instantiator는 프로퍼티를 적절한 delegate로 설정하는 옵션을 가집니다.

`DiceGameDelegate`는 게임의 진행을 기록하기 위해 3가지 메소드를 제공합니다. 이들 세 가지 메소드는 게임로직에서 위의 `play()` 메소드로 서로간에 존재하며, 새로운 게임이 시작될 때, 새로운 턴이 시작될 때, 혹은 게임이 끝날 때 호출됩니다.

`delegate` 속성이 옵셔널 `DiceGameDelegate`이기에, `play()` 메소드는 delegate에서 메소드를 호출할 때마다 매번 옵셔널 체이닝을 사용합니다. `delegate` 속성이 nil이면, 이들 delegate는 에러 없이 호출을 실패합니다. 만약 `delegate` 속성이 nil이 아니면, delegate 메소드가 호출되고, `SnakesAndLadders` 인스턴스가 파라메터로 넘겨집니다.

다음 예제는 `DiceGameDelegate` 프로토콜이 적용된 `DiceGameTracker` 클래스입니다.

``` swift
class DiceGameTracker: DiceGameDelegate {
    var numberOfTurns = 0
    func gameDidStart(game: DiceGame) {
        numberOfTurns = 0
        if game is SnakesAndLadders {
            print("Started a new game of Snakes and Ladders")
        }
        print("The game is using a \(game.dice.sides)-sided dice")
    }
    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {
        numberOfTurns += 1
        print("Rolled a \(diceRoll)")
    }
    func gameDidEnd(game: DiceGame) {
        print("The game lasted for \(numberOfTurns) turns")
    }
}
```

`DiceGameTracker`는 `DiceGameDelegate`에서 필요한 세 가지 메소드를 모두 구현하였습니다. 게임에서 턴한 횟수를 기록하기 위해 이들 메소드를 사용합니다. 게임이 시작되면 `numberOfTurns`를 0으로 초기화하고, 새로운 턴이 시작할 때마다 증가시키며, 게임이 종료되면, 전체 턴 수를 출력합니다.

위의 `gameDidStart`의 구현은 플레이 하려는 게임에 대한 안내 문구를 출력하기 위해 `game` 파라메터를 사용하였습니다. `game` 파라메터는 `SnakesAndLadders`가 아닌 `DiceGame` 타입을 가지고 있습니다. 따라서, `gameDidStart`는 유일하게 `DiceGame` 프로토콜의 일부로 구현된 프로퍼티와 메소드를 접근하고 사용할 수 있습니다. 하지만, 이 메소드는 여전히 바탕이 되는 인스턴스의 타입을 질의하기 위해 타입캐스팅을 사용하는 것이 가능합니다. 이 예제에서, `game`이 뒤에서 `SnakesAndLadders`의 인스턴스인지 체크하고, 맞다면, 적절한 메세지를 출력합니다.


`gameDidStart`는 또한 `game` 파라메터로 넘긴 `dice` 속성에 접근합니다. `game`은 `DiceGame` 프로토콜에 따르기 때문에, `dice` 속성을 가지고 있음을 보장할 수 있고, 따라서 `gameDidStart(_:)` 메소드는 어떤 종류의 게임인지에 관계없이 주사위의 `sides` 속성에 접근하고, 출력할 수 있습니다.

다음을 통해 `DiceGameTracker`가 어떻게 작동하는지 살펴봅시다.

``` swift
let tracker = DiceGameTracker()
let game = SnakesAndLadders()
game.delegate = tracker
game.play()
// 뱀과 사다리 새 게임을 시작한다
// 게임은 6면체 주사위를 사용할 것이다
// 주사위는 3
// 주사위는 5
// 주사위는 4
// 주사위는 5
// 게임은 4턴을 사용했다
```


## 확장을 프로토콜 일치에 추가

이미 존재하는 타입의 소스에 접근할 수 없어도 그 타입에 프로토콜을 적용하고 일치하도록 확장할 수 있습니다. 확장은 새 속성들, 메소드들, 서브스크립트들을 존재하는 타입에 추가할 수 있으며, 프로토콜이 요구하는 어떠한 요구사항도 추가할 수 있습니다.확장에 대해 더 많은 정보는 [확장](#) 챕터를 참고하세요.

> NOTE
>
> 타입의 존재하는 인스턴스들은 확장에서 conformance가 인스턴스의 타입에 추가될 때, 자동적으로 적용되고 프로토콜을 따릅니다.

예를 들어, `TextRepresentable`이라는 프로토콜은 텍스트를 대표하는 어떤 타입에서도 구현될 수 있습니다. 스스로 인스턴스의 설명이 되거나, 현재 상태의 텍스트 표현일 수 있습니다.

``` swift
protocol TextRepresentable {
    var textualDescription: String { get }
}
```

위에서 본 `Dice` 클래스는 `TextRepresentable`를 적용하고 일치하기 위해 확장될 수 있습니다.

``` swift
extension Dice: TextRepresentable {
    var textualDescription: String {
        return "A \(sides)-sided dice"
    }
}
```

확장은 `Dice`를 위에서 구현했던 것과 정확히 같은 방법으로 새로운 프로토콜을 적용합니다. 프로토콜 이름 뒤에 콜론으로 구분해서 프로토콜의 이름을 적고 중괄호 안에 프로토콜의 요구사항들 전부를 구현하면 됩니다.

이제 어떤 `Dice` 인스턴스들도 `TextRepresentable`로 다뤄질 수 있다. 


```swift
let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())
print(d12.textualDescription)
// Prints "A 12-sided dice"
```

비슷하게 `SnakesAndLadders` 게임 클래스도 `TextRepresentable` 프로토콜을 적용하고 일치하도록 확장될 수 있습니다.

``` swift
extension SnakesAndLadders: TextRepresentable {
    var textualDescription: String {
        return "A game of Snakes and Ladders with \(finalSquare) squares"
    }
}
print(game.textualDescription)
// Prints "A game of Snakes and Ladders with 25 squares"
```


### 프로토콜 적용 선언을 확장과 함께 하기

타입이 이미 프로토콜의 모든 요구사항에 일치하고 있지만, 프로토콜을 적용한다고 명시하지 않았을 때, 빈 확장과 함께 프로토콜을 적용시킬 수 있습니다.

``` swift
struct Hamster {
    var name: String
    var textualDescription: String {
        return "A hamster named \(name)"
    }
}
extension Hamster: TextRepresentable {}
```

이제 `Hamster`의 인스턴스들은 `TextRepresentable`을 타입으로 사용할 수 있습니다.

``` swift
let simonTheHamster = Hamster(name: "Simon")
let somethingTextRepresentable: TextRepresentable = simonTheHamster
print(somethingTextRepresentable.textualDescription)
// "햄스터 이름은 Simon" 출력
```

> NOTE
>
> 타입에서 요구사항을 만족했다고 자동으로 프토토콜이 적용되지는 않습니다. 항상 명시적으로 프로토콜의 적용을 선언해줘야 합니다.


## 프로토콜 타입의 콜렉션(Collection)들

프로토콜은 [타입으로서의 프로토콜](#)에서 이야기한 것처럼 배열이나 사전같은 콜렉션에 저장되는 타입으로 사용할 수 있습니다. 이 예제는  `TextRepresentable`의 배열을 만듭니다.

``` swift
let things: [TextRepresentable] = [game, d12, simonTheHamster]
```

배열에서 아이템들을 반복하면서 각 아이템을 텍스트로 출력하는 것이 가능합니다.

``` swift
for thing in things {
    print(thing.textualDescription)
}
// 뱀과 사다리 게임은 25칸
// 12면체 주사위
// 햄스터 이름은 Simon
```

`thing` 상수가 `TextRepresentable` 타입임을 명심하세요. 그것은 `Dice`나 `DiceGame`, `Hamster` 타입이 아니고, 심지어 뒤에서 이들 중 어떤 하나의 실제적인 타입도 아닙니다. 그럼에도 불구하고, `TextRepresentable` 타입이기 때문에, `TextRepresentable`이 `textualDescription` 속성을 가지고 있다고 알려진 어떤 것이며, 이는 각 루프 때마다 `thing.textualDescription`에 접근하는 것이 안전합니다.

## 프로토콜 상속

프로토콜은 하나 이상의 프로토콜을 *상속*받을 수 있고, 그 요구사항들 위에 다른 요구사항을 추가할 수도 있습니다. 프로토콜 상속 문법은 클래스 상속의 문법과 비슷하지만 쉼표를 구분해서 여러 프로토콜을 나열할 수 있습니다.

``` swift
protocol InheritingProtocol: SomeProtocol, AnotherProtocol {
    // 프로토콜 정의가 여기 옵니다
}
```

위의 `TextRepresentable` 프로토콜을 상속받는 예제입니다.

``` swift
protocol PrettyTextRepresentable: TextRepresentable {
    var prettyTextualDescription: String { get }
}
```

이 예제에서는 `TextRepresentable`을 상속받는 `PrettyTextRepresentable`라는 새로운 프로토콜을 정의합니다. `PrettyTextRepresentable`을 적용한 것들은 `TextRepresentable`의 요구사항을 모두 만족해야 하고, 추가로 `PrettyTextRepresentable`의 요구사항도 만족해야 합니다. 이 예제에서, `PrettyTextRepresentable`는 `prettyTextualDescription`라는 `String`을 리턴하는 gettable 프로퍼티를 제공하기 위해 하나의 요구사항을 추가합니다.

`SnakesAndLadders` 클래스는 `PrettyTextRepresentable`를 적용하고 따르도록 확장될 수 있습니다.

``` swift
extension SnakesAndLadders: PrettyTextRepresentable {
    var prettyTextualDescription: String {
        var output = textualDescription + ":\n"
        for index in 1...finalSquare {
            switch board[index] {
            case let ladder where ladder > 0:
                output += "▲ "
            case let snake where snake < 0:
                output += "▼ "
            default:
                output += "○ "
            }
        }
        return output
    }
}
```

이 extension은 `PrettyTextRepresentable` 프로토콜을 따른다고 기술하고, `SnakesAndLadders`을 위해 `prettyTextualDescription` 프로퍼티의 구현을 제공합니다. `PrettyTextRepresentable`에 있는 어떤 것이든, `TextRepresentable`에도 있어야 하고, 그래서 `prettyTextualDescription`의 구현이 `TextRepresentable`로 부터 문자열을 출력할 때까지 `textualDescription` 프로퍼티에 접근하면서 시작됩니다. 콜론과 줄바꿈을 덧붙이고, 이것을 그것의 예쁜 텍스트 표시의 시작으로서 사용합니다. 보드 스퀘어의 배열을 돌면서, 각각의 칸의 컨텐츠를 대표하기 위해 기하학적인 모형을 덧붙입니다.

* 칸의 값이 `0`보다 크다면, 그것은 사다리의 base이고, ▲로 표시
* 칸의 값이 `0`보다 작다면, 그것은 뱀의 머리이고, ▼로 표시
* 칸의 값이 `0`이고, 빈 칸이라면, ○로 표시

`prettyTextualDescription` 프로퍼티는 이제 어떤 `SnakesAndLadders` 인스턴스라도 예쁜 텍스트 표현으로 출력하기 위해 사용될 수 있습니다.

``` swift
print(game.prettyTextualDescription)
// A game of Snakes and Ladders with 25 squares:
// ○ ○ ▲ ○ ○ ▲ ○ ○ ▲ ▲ ○ ○ ○ ▼ ○ ○ ○ ○ ▼ ○ ○ ▼ ○ ▼ ○
```

## 클래스에만 적용가능한 프로토콜(Class-Only Protocols)

`class` 키워드를 프로토콜의 상속 리스트에 추가함으로서 프로토콜의 적용을 클래스 타입(구조체나 열거형이 아닌)에만 제한할 수 있습니다. `class` 키워드는 어떤 상속된 프로토콜들 보다도 프로토콜의 상속 리스트의 맨 앞에 있어야 합니다.

```swift
protocol SomeClassOnlyProtocol: class, SomeInheritedProtocol {
    // class-only protocol definition goes here
}
```

위의 예제에서 `SomeClassOnlyProtocol`은 클래스 타입에만 적용될 수 있습니다. 구조체느 열거형에 `SomeClassOnlyProtocol`를 적용하고자 한다면, 컴파일시 에러가 발생합니다.

> NOTE
>
> 프로토콜의 요구사항에 의해서 정의되는 행동을 일치하는 타입이 값의 의미보다 참조의 의미를 가지고 있음을 가정하거나 요구할 때, 클래스에만 적용가능한 프로토콜을 사용하세요. 참조와 값의의미에 대한 더 자세한 정보는 [Structures and Enumerations Are Value Types](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-ID88)와 [Classes Are Reference Types](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-ID89)를 참조하세요.

## 프로토콜 합성

프로토콜 합성은 여러 프로토콜을 한 번에 일치하는 타입을 요구할 때 유용합니다. 여러 프로토콜을 프로토콜 합성으로 하나의 요구사항으로 합칠 수 있습니다. 프로토콜 합성은 `protocol<SomeProtocol, AnotherProtocol>`과 같은 형태입니다. 필요한 만큼 꺽쇠(`<>`) 괄호에 프로토콜을 나열할 수 있습니다.

다음의 예제는 `Named`와 `Aged`라는 두 프로토콜을 함수 파라메터에 하나의 프로토콜 요구사항으로 합성하는 예제입니다.

``` swift
protocol Named {
    var name: String { get }
}
protocol Aged {
    var age: Int { get }
}
struct Person: Named, Aged {
    var name: String
    var age: Int
}
func wishHappyBirthday(celebrator: protocol<Named, Aged>) {
    print("Happy birthday \(celebrator.name) - you're \(celebrator.age)!")
}
let birthdayPerson = Person(name: "Malcolm", age: 21)
wishHappyBirthday(birthdayPerson)
// Prints "Happy birthday Malcolm - you're 21!"
```

이 예제는 `String` 타입의 `name`이라는 읽기 속성 하나를 요구사항으로 가지는 `Named`라는 프로토콜을 정의합니다. 또한 `Int` 타입의 `age`라는 읽기 속성 하나를 요구사항으로 가지는 `Aged`도 정의합니다. 두 프로토콜 모두 `Person` 구조체에 적용됩니다.

이 예제는 `celebrator`이라는 하나의 파라메터를 취하는 `wishHappyBirthday`라는 함수를 정의합니다. 이 파라메터의 타입은 "`Named`와 `Aged` 프로토콜 모두에 일치하는 어떤 타입"을 의미하는 `protocol<Named, Aged>`입니다. 요구되는 프로토콜을 모두 따르기만 한다면, 어떤 구체적인 타입이 함수를 통과하는지는 상관없습니다.

이 예제는 `birthdayPerson`라는 새로운 `Person` 인스턴스를 만듭니다. 그리고 새로운 인스턴스를 `wishHappyBirthday(_:)` 함수로 통과시킵니다. `Person`이 두 프로토콜 모두를 따르기에, 이것은 유효한 호출이고, `wishHappyBirthday(_:)` 함수는 생일 축하 인사를 출력할 수 있습니다.

> NOTE
>
> 프로토콜 합성은 새로운, 영구적인 프토토콜 타입을 만드는 것이 아닙니다. 그렇다기 보다는, 프로토콜 합성은 조합에서 모든 프로토콜의 요구사항을 결합하는 임시의 일부에 적용되는(local) 프로토콜을 정의합니다.


## 프로토콜 일치를 확인하기

[타입 캐스팅](#)에서 설명했던 것처럼 특정 프로토콜로 캐스팅하기 위해, 그리고 프로토콜 일치를 확인하기 위해 `is`와 `as` 연산자를 사용할 수 있습니다. 타입을 확인하고 캐스팅하는 것과 정확히 같은 방법으로 프로토콜을 확인하고 캐스팅할 수 있습니다.

- `is` 연산자에서는 인스턴스가 프로토콜과 일치하면 `true`, 아니면 `false`를 리턴합니다.
- `as?` 다운캐스팅 연산자는 프로토콜 타입의 옵션값을 리턴하는데, 인스턴스가 프로토콜과 일치하지 않으면 `nil`이 됩니다.
- `as!` 연산자는 강제로 다운캐스팅하고, 실패하면 런타임 에러가 발생합니다.

다음은 `Double` 타입의 `area` 읽기 속성 하나를 요구사항으로 갖는 `HasArea` 프로토콜 예제입니다.

``` swift
protocol HasArea {
    var area: Double { get }
}
```

`HasArea` 프로토콜과 일치하는 `Circle`과 `Country` 두 가지 클래스가 있습니다.

``` swift
class Circle: HasArea {
    let pi = 3.1415927
    var radius: Double
    var area: Double { return pi * radius * radius }
    init(radius: Double) { self.radius = radius }
}
class Country: HasArea {
    var area: Double
    init(area: Double) { self.area = area }
}
```

`Circle` 클래스는 저장된 `radius` 속성을 기반으로  `area` 속성을 계산된 속성으로서 구현합니다. `Country` 클래스에서는 직접 저장된 속성으로 `area` 속성을 구현합니다. 두 가지 클래스 모두 `HasArea` 프로토콜에 정확히 일치합니다.

 `HasArea` 프로토콜에 일치하지 않는 `Animal`이라는 클래스가 있습니다.

```swift
class Animal {
    var legs: Int
    init(legs: Int) { self.legs = legs }
}
```

`Circle`, `Country`, `Animal` 클래스는 공통된 부모 클래스를 갖지 않습니다. 그럼에도 불구하고, 그들은 모두 클래스이고, 그래서 모든 세 타입의 인스턴스는 `AnyObject` 타입의 저장된 값의 배열로 초기화 될 수 있습니다.


``` swift
let objects: [AnyObject] = [
    Circle(radius: 2.0),
    Country(area: 243_610),
    Animal(legs: 4)
]
```

`Circle` 인스턴스는 반지름 2로, `Country` 인스턴스는 영국의 면적으로, `Animal` 인스턴스는 다리 4개로 초기화되어 배열 표기를 통해 `objects` 배열에 초기화되었습니다.

`objects` 배열은 순환가능하며, 배열 내 각각의 객체는 `HasArea` 프로토콜에 일치하는지 확인할 수 있습니다.

``` swift
for object in objects {
    if let objectWithArea = object as? HasArea {
        print("넓이는 \(objectWithArea.area)")
    } else {
        print("넓이를 가지고 있지 않다")
    }
}
// 넓이는 12.5663708
// 넓이는 243610.0
// 넓이를 가지고 있지 않다
```

배열 내의 객체가 `HasArea` 프로토콜에 일치할 때마다, `as?` 연산자를 통해 `objectWithArea`라는 상수값으로 옵션값을 받을 수 있습니다. `objectWithArea` 상수는 `HasArea` 타입이며, 그래서 `area` 속성은 접근될 수 있고, 타입에 안전한 방법으로 출력될 수 있습니다.

캐스팅 과정에서 객체들이 변하지 않습니다. 여전히 `Circle`, `Country`, `Animal` 객체로 이어집니다. 하지만, 그들이 `objectWithArea` 상수에 저장되는 시점에서, 그들은 `HasArea` 타입으로 알려지고, `area`에 대해 접근될 수 있습니다.

## 옵셔널 프로토콜 요구사항

프로토콜에 대해 *옵셔널 요구사항*을 정의할 수 있습니다. 프로토콜에 일치하기 위해서 이 요구사항들이 구현될 필요는 없습니다. 옵셔널 요구사항들은 프로토콜 정의의 일부로, 정의 앞에 `optional` 키워드가 붙습니다. 옵셔널 요구사항에서 메소드나 프로퍼티를 사용할 때, 그것의 타입은 자동적으로 옵셔널이 됩니다. 예를 들어, `(Int) -> String` 타입의 메소드는 `((Int) -> String)?`이 됩니다. 메소드의 리턴 타입이 아닌, 전체 함수 타입이 옵셔널로 감싸짐을 명심하세요.

옵셔널 프로토콜 요구사항은 프로토콜에 일치하는 타입에 의해서 요구사항이 구현되지 않았을 가능성을 설명하기 위한 옵셔널 체인으로 호출될 수 있습니다. 당신은 옵셔널 메소드의 구현을 `someOptionalMethod?(someArgument)` 처럼, 호출될 때 메소드의 이름 뒤에 물음표를 작성함으로서 체크합니다. 옵셔널 체이닝에 대한 자세한 정보는 [Optinal Chaining](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID245)을 참고하세요.

> NOTE
> 프로토콜의 선택적 요구사항들은 `@objc` 속성이 명시되어있을 때만 명시될 수 있습니다.
>
> 이 속성은 Objective-C 코드로 노출되어져야만하는 프로토콜을 가리킵니다. 그리고 이 속성은 [*Using Swift with Cocoa and Objective-C (Swift 2.2)*](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/index.html#//apple_ref/doc/uid/TP40014216)에 나타나 있습니다. 심지어 당신이 Objective-C와 같이 동작하지 않더라도, 만약 당신이 옵셔널 요구사항을 명시하기를 원한다면, 당신의 프로토콜을 `@objc` 속성을 표시할 필요가 있습니다.
>
> `@objc` 프로토콜은 Objective-C 클래스 혹은 다른 `@objc` 클래스에서 상속된 클래스에 의해 적용될 수 있음을 명심하세요. 그것들은 구조체나 열거형에 적용될 수 없습니다.

다음 예제는 증가량을 외부에 제공하기 위해 사용하는 `Counter`라는 정수 카운터를 정의합니다. 데이터 소스는 두 옵셔널 요구사항을 가진 `CounterDataSource` 프로토콜에 의해 정의되어 있습니다.

``` swift
@objc protocol CounterDataSource {
    optional func incrementForCount(count: Int) -> Int
    optional var fixedIncrement: Int { get }
}
```

`CounterDataSource` 프로토콜은 `incrementForCount(_:)`라는 옵셔널 메소드 요구사항과 `fixedIncrement`라는 옵셔널 프로퍼티 요구사항을 정의합니다. 이들 요구사항은 데이터 소스에 `Counter` 인스턴스를 위해 적절한 증가량을 제공하기 위한 두 다른 방법을 정의합니다.

> NOTE
>
> 엄밀히 말해, 두 프로토콜 요구사항을 구현하지 않고서도 `CounterDataSource`에 일치하는 커스텀 클래스를 작성할 수 있습니다. 결국 그들은 모두 옵셔널입니다. 비록 기술적으로는 허용되지만, 좋은 데이터 소스를 만들지는 못합니다.

아래 정의된 `Counter` 클래스는 `CounterDataSource?` 타입의 옵셔널 `dataSource` 프로퍼티를 가지고 있습니다.

```swift
class Counter {
    var count = 0
    var dataSource: CounterDataSource?
    func increment() {
        if let amount = dataSource?.incrementForCount?(count) {
            count += amount
        } else if let amount = dataSource?.fixedIncrement {
            count += amount
        }
    }
}
```

`Counter` 클래스는 현재 값을 `count`라는 변수 프로퍼티에 저장합니다. `Counter` 클래스는 또한 메소드가 호출될 때마다 `count` 프로퍼티를 증가시키는 `increment`라는 메소드를 정의합니다.

`increment()` 메소드는 데이터 소스에서 `incrementForCount(_:)` 메소드의 구현을 찾음으로서 증가량을 가져오는 것을 먼저 시도합니다. `increment()` 메소드는 `incrementForCount(_:)`를 호출하는 것을 시도하기 위해 옵셔널 체이닝을 사용합니다. 그리고 현재 `count` 값을 메소드의 하나의 인자로서 넘깁니다.

여기 있는 옵셔널 체이닝의 두 단계를 명심하세요. 첫 번째로, `dataSource`가 `nil`이 될 수 있는 가능성이 있고, 그래서 `dataSource`는 이름 뒤에  `incrementForCount(_:)`가 `dataSource`가 `nil`이 아닐 때에만 호출되기 위한 것을 가리키는 물음표 마크를 가지고 있습니다. 두 번째로, 심지어 `dataSource`가 존재하지만, 옵셔널 요구사항이기 때문에, `incrementForCount(_:)`가 구현되었을 것이란 보장이 없습니다. 여기에서, `incrementForCount(_:)`가 구현되지 않았을 가능성은 또한 옵셔널 체이닝에 의해서 다뤄집니다. `incrementForCount(_:)`의 호출은 `incrementForCount(_:)`가 존재할 때에만 발생합니다. 즉, `nil`이 아닐 경우입니다. 이것이 `incrementForCount(_:)`이 또한 이름 뒤에 물음표 마크가 붙어있는 이유입니다.

`incrementForCount(_:)`를 호출하는 것은 두 이유 중 어떤 것에서도 실패할 수 있기에, 호출은 옵셔널 `Int` 값을 리턴합니다. 이것은 심지어 비록 `incrementForCount(_:)`가 `CounterDataSource`의 정의에서 옵셔널이 아닌 `Int` 값을 리턴한다고 정의되어 있어도 참입니다. 여러 옵셔널 체이닝 동작에 관한 내용은 [Linking Multiple Levels of Chaining](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID252)를 참고하세요.

`incrementForCount(_:)`를 호출한 뒤에, 그것이 리턴하는 옵셔널 `Int`는 옵셔널 바인딩을 이용해 `amount`라는 상수로 벗겨냅니다. 만약 옵셔널 `Int`가 정말 값을 포함한다면 - 즉, 만약 delegate와 메소드가 모두 존재하고, 메소드가 값을 리턴한다면, -벗겨낸 `amount`값은 저장된 `count` 프로퍼티에 더해집니다. 그리고 증가가 완료됩니다.

`incrementForCount(_:)` 메소드로부터 값을 구하는 것이 가능하지 않을 가능성이 있다면, - `dataSource`가 nil이거나, 데이터 소스가 `incrementForCount(_:)`를 구현하지 않은 중 하나이기 때문에 - `increment()` 메소드는 데이터 소스의 `fixedIncrement` 프로퍼티에서 대신 값을 구하는 것을 시도합니다. `fixedIncrement` 프로퍼티는 또한 옵셔널 요구사항입니다. 그래서 그것의 값은 `fixedIncrement`가 `CounterDataSource` 프로토콜 정의의 일부로, 옵셔널이 아닌 `Int` 프로퍼티로 정의되었어도, 옵셔널 `Int` 값입니다.

여기에 데이터 소스가 매번 질의될 때마다, `3`의 상수 값을 리턴하는 간단한 `CounterDataSource` 구현이 있습니다. 이것은 옵셔널 `fixedIncrement` 프로퍼티 요구사항을 구현함으로서 하였습니다.

``` swift
class ThreeSource: NSObject, CounterDataSource {
    let fixedIncrement = 3
}
```

`ThreeSource`의 인스턴스를 새로운 `Counter` 인스턴스의 데이터 소스로 사용할 수 있습니다.

``` swift
var counter = Counter()
counter.dataSource = ThreeSource()
for _ in 1...4 {
    counter.increment()
    print(counter.count)
}
// 3
// 6
// 9
// 12
```

새로운 `Counter` 인스턴스를 만드는 위의 코드에서는; 데이터 소스를 새로운 `ThreeSource` 인스턴스로 설정하고; 카운터의 `increment()` 메소드를 네 번 호출합니다. 예상대로, 카운터의 `count` 프로퍼티는 `increment()`가 호출되는 매 번마다 3씩 증가합니다. 

여기에 `Coutner` 인스턴스를 증가시키거나 현재 `count` 값에서 0으로 감소시키는 `TowardsZeroSource`라는 조금 더 복잡한 데이터 소스가 있습니다.

``` swift
@objc class TowardsZeroSource: NSObject, CounterDataSource {
    func incrementForCount(count: Int) -> Int {
        if count == 0 {
            return 0
        } else if count < 0 {
            return 1
        } else {
            return -1
        }
    }
}
```

`TowardsZeroSource` 클래스는 `CounterDataSource` 프로토콜로부터 옵셔널 `incrementForCount(_:)` 메소드를 구현합니다. 그리고 `TowardsZeroSource` 클래스는 카운트가 진행되는 방향을 계산하기 위해  `count` 인자 값을 사용합니다. 만약 `count`가 이미 0이라면, 메소드는 더 이상의 카운트가 발생하지 않는다는 것을 가리키는 `0`을 리턴합니다.

`-4`에서 0으로 세기 위해 `TowardsZeroSource`의 인스턴스를 존재하는 `Counter` 인스턴스와 함께 사용할 수 있습니다. 한 번 카운터가 0에 도달하면, 더 이상의 카운트는 발생하지 않습니다.

``` swift
counter.count = -4
counter.dataSource = TowardsZeroSource()
for _ in 1...5 {
    counter.increment()
    print(counter.count)
}
// -3
// -2
// -1
// 0
// 0
```

## 프로토콜 확장(Protocol Extensions)

프로토콜은 일치하는 타입의 메소드와 프로퍼티 구현을 제공하는 것으로 확장될 수 있습니다. 이것은 당신이 각각의 타입의 개별적인 일치나, 글로벌 함수에서 보다는 프로토콜 스스로에 대해 행동을 정의하는 것을 허용합니다.

예를 들어, `RandomNumberGenerator` 프로토콜은 랜덤의 `Bool` 값을 리턴하기 위한 요구되는 `random()` 메소드의 결과를 사용하는 `randomBool()` 메소드를 제공하기 위해 확장될 수 있습니다.

```swift
extension RandomNumberGenerator {
    func randomBool() -> Bool {
        return random() > 0.5
    }
}
```

프로토콜에서 확장을 만듦으로서, 모든 일치하는 타입은 추가적인 수정없이 자동적으로 이 메소드의 구현을 얻게 됩니다.

```swift
let generator = LinearCongruentialGenerator()
print("Here's a random number: \(generator.random())")
// Prints "Here's a random number: 0.37464991998171"
print("And here's a random Boolean: \(generator.randomBool())")
// Prints "And here's a random Boolean: true"
```

### 기본 구현 제공하기(Providing Default Implementations)

그 프로토콜의 어떤 메소드나 프로퍼티 요구를 위한 기본 구현을 제공하기 위해 프로토콜 확장을 사용할 수 있습니다. 만약 일치하는 타입이 요구되는 메소드나 프로퍼티의 그것만의 구현을 제공한다면, 그 구현은 확장에 의해 제공된 것을 대신해 사용될 것입니다.

> NOTE
>
> 기본 구현과 함께 확장에 의해 제공되는 프로토콜 요구사항은 옵셔널 프로토콜 요구사항들과는 별개의 것입니다. 비록 일치하는 타입이 그들만의 구현을 제공할 필요는 없지만, 기본 구현과 함께 요구사항들은 옵셔널 체이닝 없이 호출될 수 있습니다.

예를 들어, `TextRepresentable`에서 상속된 `PrettyTextRepresentable` 프로토콜은 단순히 `textualDescription` 프로퍼티에 접근의 결과를 리턴하기 위한 그것의 required `prettyTextualDescription` 프로퍼티의 기본 구현을 제공할 수 있습니다.

```swift
extension PrettyTextRepresentable  {
    var prettyTextualDescription: String {
        return textualDescription
    }
}
```

### 프로토콜 확장에 제약 추가하기(Adding Constraints to Protocol Extensions)

프로토콜 확장을 정의할 때, 당신은 일치하는 타입이 메소드와 프로퍼티의 확장 이전에 가능한지를 만족해야만 하는 제약을 구체화 할 수 있습니다. 이 제약을 프로토콜의 이름 뒤에 [Where Clauses](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html#//apple_ref/doc/uid/TP40014097-CH26-ID192)에 기술된대로, `where` 클로저를 이용해서 작성합니다.

예를 들어, 어떤 컬렉션에 누구의 요소를 위의 예제에서의 `TextRepresentable`에 따르게 할 것인지를 적용하는 `CollectionType` 프로토콜에 대한 확장을 정의할 수 있습니다.

```swift
extension CollectionType where Generator.Element: TextRepresentable {
    var textualDescription: String {
        let itemsAsText = self.map { $0.textualDescription }
        return "[" + itemsAsText.joinWithSeparator(", ") + "]"
    }
}
```

`textualDescription` 프로퍼티는 컬렉션에서 각각 요소의 텍스트 표현을 괄호로 감싸진 컴마로 구분된 리스트로 연결함으로서, 전체 컬렉션의 원문의 기술을 리턴합니다.

위의 `TextRepresentable` 프로토콜에 일치하는 `Hamster` 구조체와 `Hamster` 값의 배열을 고려해봅시다.

```swift
let murrayTheHamster = Hamster(name: "Murray")
let morganTheHamster = Hamster(name: "Morgan")
let mauriceTheHamster = Hamster(name: "Maurice")
let hamsters = [murrayTheHamster, morganTheHamster, mauriceTheHamster]
```

`Array`가 `CollectionType`에 일치하고, 배열의 요소는 `TextRepresentable` 프로토콜에 일치되기에, 배열은 `textualDescription` 프로퍼티를 그것의 내용의 텍스트 표현을 얻기 위해 사용할 수 있습니다.

````swift
print(hamsters.textualDescription)
// Prints "[A hamster named Murray, A hamster named Morgan, A hamster named Maurice]"
````

> NOTE
>
> 만약 일치하는 타입이 같은 메소드나 프로퍼티에 대해 구현들을 제공하는 여러 강요된 확장의 요구사항을 만족한다면, Swift는 가장 특수한 제약조건에 대응되는 구현을 사용할 것입니다.